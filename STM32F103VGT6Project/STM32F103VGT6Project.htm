<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F103VGT6Project\STM32F103VGT6Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F103VGT6Project\STM32F103VGT6Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6110004: Last Updated: Mon Feb 18 16:37:51 2019
<BR><P>
<H3>Maximum Stack Usage =        960 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; RFASKTask_Task &rArr; RFASKTask_HandlerTask &rArr; RFASKTask_FreqCurrentPointTwoTask &rArr; RFASKTask_FreqCurrentScan &rArr; RFASKTask_SitesCurrent &rArr; ADCTask_RFASKTask_GetADC &rArr; ADCLib_HandleChannelVal &rArr; ADC_HandleChannelVal &rArr; CalcAvgFun1 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f1xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from stm32f1xx_it.o(.text.DMA1_Channel1_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from stm32f1xx_it.o(.text.DMA2_Channel4_5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f1xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[49]">DelayTask_us</a> from delay_task.o(.text.DelayTask_us) referenced 2 times from i2c_cfg.o(.text.I2C_MSW_Init)
 <LI><a href="#[49]">DelayTask_us</a> from delay_task.o(.text.DelayTask_us) referenced 2 times from main.o(.text.Sys_Init)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4b]">HAL_IncTick</a> from stm32f1xx_hal.o(.text.HAL_IncTick) referenced 2 times from systick_cfg.o(.text.SysTick_Init)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f1xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4a]">LEDWork_Task</a> from led_cfg.o(.text.LEDWork_Task) referenced 2 times from led_cfg.o(.text.LEDWork_Init)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f1xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f1xx_it.o(.text.NMI_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from stm32f1xx_it.o(.text.PVD_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f1xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from stm32f1xx_it.o(.text.RCC_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f1xx_it.o(.text.SVC_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4c]">SysTickTask_GetTick</a> from systick_task.o(.text.SysTickTask_GetTick) referenced 2 times from main.o(.text.Sys_Init)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f1xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f1xx.o(.text.SystemInit) referenced from startup_stm32f103xg.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f1xx_it.o(.text.TIM2_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4d]">Timer_CalcFreq_Init</a> from timer_cfg.o(.text.Timer_CalcFreq_Init) referenced 2 times from timer_cfg.o(.text.Timer_CalcFreq_Task)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f1xx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f1xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from stm32f1xx_it.o(.text.WWDG_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xg.o(.text)
 <LI><a href="#[4e]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[46]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(.text)
</UL>
<P><STRONG><a name="[2eb]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2ec]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2ed]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2ee]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2ef]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2f0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_SitesCurrent
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_CalcXTAL
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
</UL>

<P><STRONG><a name="[2f1]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCTask_RFASKTask_GetADC
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HandleChannelVal
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Init
</UL>

<P><STRONG><a name="[2f3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_Calc_PllRate
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2da]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_Calc_PllRate
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_Calc_PllRate
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAvgFun1
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAvgFun1
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_Calc_PllRate
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_Calc_PllRate
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAvgFun1
</UL>

<P><STRONG><a name="[2d9]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_Calc_PllRate
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAvgFun1
</UL>

<P><STRONG><a name="[2f4]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[2f5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[2f6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2f7]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[58]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[60]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[5f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e7]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[50]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2f9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>ADCLib_ADCTask_START</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, adc_lib.o(.text.ADCLib_ADCTask_START))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ADCLib_ADCTask_START &rArr; ADC_ADCTask_START &rArr; ADC_ADC3_DMA_Restart &rArr; ADC_SoftStart &rArr; LL_ADC_REG_StartConversionSWStart
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADCTask_START
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCTask_RFASKTask_GetADC
</UL>

<P><STRONG><a name="[6d]"></a>ADCLib_ADCTask_STOP</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, adc_lib.o(.text.ADCLib_ADCTask_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADCLib_ADCTask_STOP &rArr; ADC_ADCTask_STOP &rArr; ADC_ADC3_DMA_Stop &rArr; LL_DMA_DisableChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADCTask_STOP
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCTask_ADCTask_STOP
</UL>

<P><STRONG><a name="[6f]"></a>ADCLib_ADC_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, adc_lib.o(.text.ADCLib_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ADCLib_ADC_Init &rArr; ADC_ADC_Init &rArr; ADC_ADCTask_Init &rArr; ADC_ADC3Task_Init &rArr; ADC_ADC3_DMA_Init &rArr; LL_DMA_DeInit &rArr; LL_DMA_ClearFlag_GI7
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCTask_ADC_Init
</UL>

<P><STRONG><a name="[71]"></a>ADCLib_HandleChannelVal</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, adc_lib.o(.text.ADCLib_HandleChannelVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ADCLib_HandleChannelVal &rArr; ADC_HandleChannelVal &rArr; CalcAvgFun1 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HandleChannelVal
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCTask_RFASKTask_GetADC
</UL>

<P><STRONG><a name="[73]"></a>ADCTask_ADCTask_STOP</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, adc_task.o(.text.ADCTask_ADCTask_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ADCTask_ADCTask_STOP &rArr; ADCLib_ADCTask_STOP &rArr; ADC_ADCTask_STOP &rArr; ADC_ADC3_DMA_Stop &rArr; LL_DMA_DisableChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCLib_ADCTask_STOP
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>ADCTask_ADC_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, adc_task.o(.text.ADCTask_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ADCTask_ADC_Init &rArr; ADCLib_ADC_Init &rArr; ADC_ADC_Init &rArr; ADC_ADCTask_Init &rArr; ADC_ADC3Task_Init &rArr; ADC_ADC3_DMA_Init &rArr; LL_DMA_DeInit &rArr; LL_DMA_ClearFlag_GI7
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCLib_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[75]"></a>ADCTask_RFASKTask_GetADC</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, adc_task.o(.text.ADCTask_RFASKTask_GetADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ADCTask_RFASKTask_GetADC &rArr; ADCLib_HandleChannelVal &rArr; ADC_HandleChannelVal &rArr; CalcAvgFun1 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCLib_HandleChannelVal
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCLib_ADCTask_START
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_SitesCurrent
</UL>

<P><STRONG><a name="[76]"></a>ADC_ADC1Task_Init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, adc_cfg.o(.text.ADC_ADC1Task_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ADC_ADC1Task_Init &rArr; ADC_ADC1_DMA_Init &rArr; LL_DMA_DeInit &rArr; LL_DMA_ClearFlag_GI7
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADCTask_Init
</UL>

<P><STRONG><a name="[77]"></a>ADC_ADC1_DMA_Init</STRONG> (Thumb, 172 bytes, Stack size 80 bytes, adc_cfg.o(.text.ADC_ADC1_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ADC_ADC1_DMA_Init &rArr; LL_DMA_DeInit &rArr; LL_DMA_ClearFlag_GI7
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DeInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableIT_TC
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1Task_Init
</UL>

<P><STRONG><a name="[83]"></a>ADC_ADC1_DMA_Restart</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, adc_cfg.o(.text.ADC_ADC1_DMA_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADC_ADC1_DMA_Restart &rArr; ADC_SoftStart &rArr; LL_ADC_REG_StartConversionSWStart
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftStart
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADCTask_START
</UL>

<P><STRONG><a name="[88]"></a>ADC_ADC1_DMA_Stop</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, adc_cfg.o(.text.ADC_ADC1_DMA_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_ADC1_DMA_Stop &rArr; LL_DMA_DisableChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_ClearFlag_TC1
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_ClearFlag_HT1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_ClearFlag_GI1
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADCTask_STOP
</UL>

<P><STRONG><a name="[78]"></a>ADC_ADC1_Init</STRONG> (Thumb, 230 bytes, Stack size 88 bytes, adc_cfg.o(.text.ADC_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ADC_ADC1_Init &rArr; LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DeInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_CommonInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Clock
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetADCClockSource
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerRanks
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1Task_Init
</UL>

<P><STRONG><a name="[96]"></a>ADC_ADC3Task_Init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, adc_cfg.o(.text.ADC_ADC3Task_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ADC_ADC3Task_Init &rArr; ADC_ADC3_DMA_Init &rArr; LL_DMA_DeInit &rArr; LL_DMA_ClearFlag_GI7
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADCTask_Init
</UL>

<P><STRONG><a name="[97]"></a>ADC_ADC3_DMA_Init</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, adc_cfg.o(.text.ADC_ADC3_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ADC_ADC3_DMA_Init &rArr; LL_DMA_DeInit &rArr; LL_DMA_ClearFlag_GI7
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DeInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableIT_TC
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3Task_Init
</UL>

<P><STRONG><a name="[99]"></a>ADC_ADC3_DMA_Restart</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, adc_cfg.o(.text.ADC_ADC3_DMA_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADC_ADC3_DMA_Restart &rArr; ADC_SoftStart &rArr; LL_ADC_REG_StartConversionSWStart
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftStart
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADCTask_START
</UL>

<P><STRONG><a name="[9a]"></a>ADC_ADC3_DMA_Stop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, adc_cfg.o(.text.ADC_ADC3_DMA_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_ADC3_DMA_Stop &rArr; LL_DMA_DisableChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_ClearFlag_TC5
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_ClearFlag_HT5
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_ClearFlag_GI5
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADCTask_STOP
</UL>

<P><STRONG><a name="[98]"></a>ADC_ADC3_Init</STRONG> (Thumb, 238 bytes, Stack size 88 bytes, adc_cfg.o(.text.ADC_ADC3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ADC_ADC3_Init &rArr; LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DeInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_CommonInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Clock
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetADCClockSource
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerRanks
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3Task_Init
</UL>

<P><STRONG><a name="[9e]"></a>ADC_ADCTask_Init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, adc_cfg.o(.text.ADC_ADCTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ADC_ADCTask_Init &rArr; ADC_ADC3Task_Init &rArr; ADC_ADC3_DMA_Init &rArr; LL_DMA_DeInit &rArr; LL_DMA_ClearFlag_GI7
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3Task_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1Task_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC_Init
</UL>

<P><STRONG><a name="[6c]"></a>ADC_ADCTask_START</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, adc_cfg.o(.text.ADC_ADCTask_START))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ADC_ADCTask_START &rArr; ADC_ADC3_DMA_Restart &rArr; ADC_SoftStart &rArr; LL_ADC_REG_StartConversionSWStart
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Restart
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Restart
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCLib_ADCTask_START
</UL>

<P><STRONG><a name="[6e]"></a>ADC_ADCTask_STOP</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, adc_cfg.o(.text.ADC_ADCTask_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADC_ADCTask_STOP &rArr; ADC_ADC3_DMA_Stop &rArr; LL_DMA_DisableChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Stop
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCLib_ADCTask_STOP
</UL>

<P><STRONG><a name="[70]"></a>ADC_ADC_Init</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, adc_cfg.o(.text.ADC_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ADC_ADC_Init &rArr; ADC_ADCTask_Init &rArr; ADC_ADC3Task_Init &rArr; ADC_ADC3_DMA_Init &rArr; LL_DMA_DeInit &rArr; LL_DMA_ClearFlag_GI7
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADCTask_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCLib_ADC_Init
</UL>

<P><STRONG><a name="[8f]"></a>ADC_Clock</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, adc_cfg.o(.text.ADC_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADC_Clock &rArr; LL_APB2_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_Init
</UL>

<P><STRONG><a name="[9f]"></a>ADC_GPIO_Init</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, adc_cfg.o(.text.ADC_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ADC_GPIO_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTask_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC_Init
</UL>

<P><STRONG><a name="[72]"></a>ADC_HandleChannelVal</STRONG> (Thumb, 208 bytes, Stack size 136 bytes, adc_cfg.o(.text.ADC_HandleChannelVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ADC_HandleChannelVal &rArr; CalcAvgFun1 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DescSortFun2
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAvgFun1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCLib_HandleChannelVal
</UL>

<P><STRONG><a name="[87]"></a>ADC_SoftStart</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, adc_cfg.o(.text.ADC_SoftStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_SoftStart &rArr; LL_ADC_REG_StartConversionSWStart
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_StartConversionSWStart
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Restart
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Restart
</UL>

<P><STRONG><a name="[86]"></a>ADC_StartCalibration</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, adc_cfg.o(.text.ADC_StartCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_StartCalibration &rArr; LL_ADC_StartCalibration
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_StartCalibration
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsCalibrationOnGoing
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Restart
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Restart
</UL>

<P><STRONG><a name="[a9]"></a>AT24CXXLib_I2C_Init</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, at24cxx_lib.o(.text.AT24CXXLib_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = AT24CXXLib_I2C_Init &rArr; AT24CXX_I2C_Init &rArr; I2CTask_MSW_Init &rArr; I2CLib_MSW_Init &rArr; I2C_MSW_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXXTask_I2C_Init
</UL>

<P><STRONG><a name="[ab]"></a>AT24CXXLib_I2C_ReadPageByte</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, at24cxx_lib.o(.text.AT24CXXLib_I2C_ReadPageByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = AT24CXXLib_I2C_ReadPageByte &rArr; AT24CXX_I2C_ReadPageByte &rArr; AT24CXX_SWI2C_ReadPageByte &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_I2C_ReadPageByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXXTask_I2C_ReadPageByte
</UL>

<P><STRONG><a name="[ad]"></a>AT24CXXLib_I2C_WritePageByte</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, at24cxx_lib.o(.text.AT24CXXLib_I2C_WritePageByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = AT24CXXLib_I2C_WritePageByte &rArr; AT24CXX_I2C_WritePageByte &rArr; AT24CXX_SWI2C_WritePageByte &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_I2C_WritePageByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXXTask_I2C_WritePageByte
</UL>

<P><STRONG><a name="[af]"></a>AT24CXXTask_I2C_Init</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, at24cxx_task.o(.text.AT24CXXTask_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = AT24CXXTask_I2C_Init &rArr; AT24CXXLib_I2C_Init &rArr; AT24CXX_I2C_Init &rArr; I2CTask_MSW_Init &rArr; I2CLib_MSW_Init &rArr; I2C_MSW_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXXLib_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[b0]"></a>AT24CXXTask_I2C_ReadPageByte</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, at24cxx_task.o(.text.AT24CXXTask_I2C_ReadPageByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = AT24CXXTask_I2C_ReadPageByte &rArr; AT24CXXLib_I2C_ReadPageByte &rArr; AT24CXX_I2C_ReadPageByte &rArr; AT24CXX_SWI2C_ReadPageByte &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXXLib_I2C_ReadPageByte
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[b1]"></a>AT24CXXTask_I2C_WritePageByte</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, at24cxx_task.o(.text.AT24CXXTask_I2C_WritePageByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = AT24CXXTask_I2C_WritePageByte &rArr; AT24CXXLib_I2C_WritePageByte &rArr; AT24CXX_I2C_WritePageByte &rArr; AT24CXX_SWI2C_WritePageByte &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXXLib_I2C_WritePageByte
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[b9]"></a>AT24CXX_HWI2C_ReadPageByte</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, at24cxx_cfg.o(.text.AT24CXX_HWI2C_ReadPageByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AT24CXX_HWI2C_ReadPageByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_I2C_ReadPageByte
</UL>

<P><STRONG><a name="[bb]"></a>AT24CXX_HWI2C_WritePageByte</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, at24cxx_cfg.o(.text.AT24CXX_HWI2C_WritePageByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AT24CXX_HWI2C_WritePageByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_I2C_WritePageByte
</UL>

<P><STRONG><a name="[b2]"></a>AT24CXX_I2C_Device0_Init</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, at24cxx_cfg.o(.text.AT24CXX_I2C_Device0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = AT24CXX_I2C_Device0_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTask_Clock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_I2C_Init
</UL>

<P><STRONG><a name="[b4]"></a>AT24CXX_I2C_Device1_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at24cxx_cfg.o(.text.AT24CXX_I2C_Device1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AT24CXX_I2C_Device1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_I2C_Init
</UL>

<P><STRONG><a name="[b5]"></a>AT24CXX_I2C_Device2_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at24cxx_cfg.o(.text.AT24CXX_I2C_Device2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AT24CXX_I2C_Device2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_I2C_Init
</UL>

<P><STRONG><a name="[aa]"></a>AT24CXX_I2C_Init</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, at24cxx_cfg.o(.text.AT24CXX_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = AT24CXX_I2C_Init &rArr; I2CTask_MSW_Init &rArr; I2CLib_MSW_Init &rArr; I2C_MSW_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MHW_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_I2C_Device2_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_I2C_Device1_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_I2C_Device0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXXLib_I2C_Init
</UL>

<P><STRONG><a name="[ac]"></a>AT24CXX_I2C_ReadPageByte</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, at24cxx_cfg.o(.text.AT24CXX_I2C_ReadPageByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = AT24CXX_I2C_ReadPageByte &rArr; AT24CXX_SWI2C_ReadPageByte &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_SWI2C_ReadPageByte
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_HWI2C_ReadPageByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXXLib_I2C_ReadPageByte
</UL>

<P><STRONG><a name="[ae]"></a>AT24CXX_I2C_WritePageByte</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, at24cxx_cfg.o(.text.AT24CXX_I2C_WritePageByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = AT24CXX_I2C_WritePageByte &rArr; AT24CXX_SWI2C_WritePageByte &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_SWI2C_WritePageByte
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_HWI2C_WritePageByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXXLib_I2C_WritePageByte
</UL>

<P><STRONG><a name="[b8]"></a>AT24CXX_SWI2C_ReadPageByte</STRONG> (Thumb, 430 bytes, Stack size 72 bytes, at24cxx_cfg.o(.text.AT24CXX_SWI2C_ReadPageByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = AT24CXX_SWI2C_ReadPageByte &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_SendByte
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_SendACK
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_STOP
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_START
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_ReadByte
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_ReadACK
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_I2C_ReadPageByte
</UL>

<P><STRONG><a name="[ba]"></a>AT24CXX_SWI2C_WritePageByte</STRONG> (Thumb, 442 bytes, Stack size 80 bytes, at24cxx_cfg.o(.text.AT24CXX_SWI2C_WritePageByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = AT24CXX_SWI2C_WritePageByte &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_SendByte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_STOP
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_START
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_ReadACK
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_I2C_WritePageByte
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>CRCLib_CRC16</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, crc_lib.o(.text.CRCLib_CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CRCLib_CRC16 &rArr; CRC_CRC16_Table
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CRC16_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCTask_CRC16
</UL>

<P><STRONG><a name="[c5]"></a>CRCLib_CRC32</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, crc_lib.o(.text.CRCLib_CRC32))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CRCLib_CRC32 &rArr; CRC_CRC32_CRC &rArr; CRC_CRC32_HWCRC &rArr; CRC_CRC32_HWReSet &rArr; LL_CRC_ResetCRCCalculationUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CRC32_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCTask_CRC32
</UL>

<P><STRONG><a name="[c7]"></a>CRCLib_CRC8</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, crc_lib.o(.text.CRCLib_CRC8))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CRCLib_CRC8 &rArr; CRC_CRC8_Table
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CRC8_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCTask_CRC8
</UL>

<P><STRONG><a name="[c9]"></a>CRCLib_CheckSum</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, crc_lib.o(.text.CRCLib_CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CRCLib_CheckSum &rArr; CRC_CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCTask_CheckSum
</UL>

<P><STRONG><a name="[cb]"></a>CRCLib_Enable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, crc_lib.o(.text.CRCLib_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRCLib_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCTask_Enable
</UL>

<P><STRONG><a name="[cd]"></a>CRCLib_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, crc_lib.o(.text.CRCLib_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CRCLib_Init &rArr; CRC_Init &rArr; CRC_DeInit &rArr; LL_CRC_DeInit &rArr; LL_CRC_Write_IDR
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCTask_Init
</UL>

<P><STRONG><a name="[cf]"></a>CRCTask_CRC16</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, crc_task.o(.text.CRCTask_CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CRCTask_CRC16 &rArr; CRCLib_CRC16 &rArr; CRC_CRC16_Table
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCLib_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RealTime_AddByteCRC
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_CRCTask_Read
</UL>

<P><STRONG><a name="[d0]"></a>CRCTask_CRC32</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, crc_task.o(.text.CRCTask_CRC32))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CRCTask_CRC32 &rArr; CRCLib_CRC32 &rArr; CRC_CRC32_CRC &rArr; CRC_CRC32_HWCRC &rArr; CRC_CRC32_HWReSet &rArr; LL_CRC_ResetCRCCalculationUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCLib_CRC32
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RealTime_AddByteCRC
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_CRCTask_Read
</UL>

<P><STRONG><a name="[d1]"></a>CRCTask_CRC8</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, crc_task.o(.text.CRCTask_CRC8))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CRCTask_CRC8 &rArr; CRCLib_CRC8 &rArr; CRC_CRC8_Table
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCLib_CRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RealTime_AddByteCRC
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_CRCTask_Read
</UL>

<P><STRONG><a name="[d2]"></a>CRCTask_CheckSum</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, crc_task.o(.text.CRCTask_CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CRCTask_CheckSum &rArr; CRCLib_CheckSum &rArr; CRC_CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCLib_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RealTime_AddByteCRC
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_CRCTask_Read
</UL>

<P><STRONG><a name="[d3]"></a>CRCTask_Enable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, crc_task.o(.text.CRCTask_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRCTask_Enable &rArr; CRCLib_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCLib_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RealTime_AddByteCRC
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_CRCTask_Read
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_Init
</UL>

<P><STRONG><a name="[d4]"></a>CRCTask_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, crc_task.o(.text.CRCTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CRCTask_Init &rArr; CRCLib_Init &rArr; CRC_Init &rArr; CRC_DeInit &rArr; LL_CRC_DeInit &rArr; LL_CRC_Write_IDR
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCLib_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[c4]"></a>CRC_CRC16_Table</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, crc_cfg.o(.text.CRC_CRC16_Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CRC_CRC16_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCLib_CRC16
</UL>

<P><STRONG><a name="[c6]"></a>CRC_CRC32_CRC</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, crc_cfg.o(.text.CRC_CRC32_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CRC_CRC32_CRC &rArr; CRC_CRC32_HWCRC &rArr; CRC_CRC32_HWReSet &rArr; LL_CRC_ResetCRCCalculationUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CRC32_HWCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCLib_CRC32
</UL>

<P><STRONG><a name="[d5]"></a>CRC_CRC32_HWCRC</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, crc_cfg.o(.text.CRC_CRC32_HWCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CRC_CRC32_HWCRC &rArr; CRC_CRC32_HWReSet &rArr; LL_CRC_ResetCRCCalculationUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CRC32_HWReSet
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CRC_ReadData32
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CRC_FeedData32
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CRC32_CRC
</UL>

<P><STRONG><a name="[d6]"></a>CRC_CRC32_HWReSet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, crc_cfg.o(.text.CRC_CRC32_HWReSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC_CRC32_HWReSet &rArr; LL_CRC_ResetCRCCalculationUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CRC_ResetCRCCalculationUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CRC32_HWCRC
</UL>

<P><STRONG><a name="[c8]"></a>CRC_CRC8_Table</STRONG> (Thumb, 146 bytes, Stack size 44 bytes, crc_cfg.o(.text.CRC_CRC8_Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CRC_CRC8_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCLib_CRC8
</UL>

<P><STRONG><a name="[ca]"></a>CRC_CheckSum</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, crc_cfg.o(.text.CRC_CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CRC_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCLib_CheckSum
</UL>

<P><STRONG><a name="[da]"></a>CRC_DeInit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, crc_cfg.o(.text.CRC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CRC_DeInit &rArr; LL_CRC_DeInit &rArr; LL_CRC_Write_IDR
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CRC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Init
</UL>

<P><STRONG><a name="[cc]"></a>CRC_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, crc_cfg.o(.text.CRC_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCLib_Enable
</UL>

<P><STRONG><a name="[ce]"></a>CRC_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, crc_cfg.o(.text.CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CRC_Init &rArr; CRC_DeInit &rArr; LL_CRC_DeInit &rArr; LL_CRC_Write_IDR
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_DeInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCLib_Init
</UL>

<P><STRONG><a name="[dd]"></a>CSSLib_NMI_IRQ</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, css_lib.o(.text.CSSLib_NMI_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CSSLib_NMI_IRQ &rArr; CSS_NMI_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSS_NMI_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSSTask_NMI_IRQ
</UL>

<P><STRONG><a name="[df]"></a>CSSLib_RCC_IRQ</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, css_lib.o(.text.CSSLib_RCC_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CSSLib_RCC_IRQ &rArr; CSS_RCC_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSS_RCC_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSSTask_RCC_IRQ
</UL>

<P><STRONG><a name="[e1]"></a>CSSTask_NMI_IRQ</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, css_task.o(.text.CSSTask_NMI_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CSSTask_NMI_IRQ &rArr; CSSLib_NMI_IRQ &rArr; CSS_NMI_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSSLib_NMI_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[e2]"></a>CSSTask_RCC_IRQ</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, css_task.o(.text.CSSTask_RCC_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CSSTask_RCC_IRQ &rArr; CSSLib_RCC_IRQ &rArr; CSS_RCC_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSSLib_RCC_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>CSS_NMI_IRQ</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, css_cfg.o(.text.CSS_NMI_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CSS_NMI_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_HSECSS
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_Enable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_EnableIT_HSERDY
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_ClearFlag_HSECSS
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSSLib_NMI_IRQ
</UL>

<P><STRONG><a name="[e0]"></a>CSS_RCC_IRQ</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, css_cfg.o(.text.CSS_RCC_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CSS_RCC_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irq_disable
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_HSERDY
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_DisableIT_HSERDY
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_ClearFlag_HSERDY
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSSLib_RCC_IRQ
</UL>

<P><STRONG><a name="[a5]"></a>CalcAvgFun1</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, complier_lib.o(.text.CalcAvgFun1))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CalcAvgFun1 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HandleChannelVal
</UL>

<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f1xx_it.o(.text.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; ADCTask_ADCTask_STOP &rArr; ADCLib_ADCTask_STOP &rArr; ADC_ADCTask_STOP &rArr; ADC_ADC3_DMA_Stop &rArr; LL_DMA_DisableChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCTask_ADCTask_STOP
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_IsEnabledIT_TC
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_IsActiveFlag_TC1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f1xx_it.o(.text.DMA2_Channel4_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DMA2_Channel4_5_IRQHandler &rArr; ADCTask_ADCTask_STOP &rArr; ADCLib_ADCTask_STOP &rArr; ADC_ADCTask_STOP &rArr; ADC_ADC3_DMA_Stop &rArr; LL_DMA_DisableChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCTask_ADCTask_STOP
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_IsEnabledIT_TC
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_IsActiveFlag_TC5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>DecodeLib_ActivateSites</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, decode_lib.o(.text.DecodeLib_ActivateSites))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DecodeLib_ActivateSites &rArr; Decode_ActivateSites
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_ActivateSites
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_ActivateSites
</UL>

<P><STRONG><a name="[f1]"></a>DecodeLib_ClearState</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, decode_lib.o(.text.DecodeLib_ClearState))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DecodeLib_ClearState &rArr; Decode_ClearState
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_ClearState
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_ClearState
</UL>

<P><STRONG><a name="[f3]"></a>DecodeLib_IRQTask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, decode_lib.o(.text.DecodeLib_IRQTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DecodeLib_IRQTask &rArr; Decode_IRQTask &rArr; Decode_CaptureHandler &rArr; LL_TIM_IC_SetPolarity
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_IRQTask
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_IRQTask
</UL>

<P><STRONG><a name="[f5]"></a>DecodeLib_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, decode_lib.o(.text.DecodeLib_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DecodeLib_Init &rArr; Decode_Init &rArr; Decode_DecodeTimerInit &rArr; LL_TIM_DeInit &rArr; LL_APB2_GRP1_ReleaseReset
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_Init
</UL>

<P><STRONG><a name="[f7]"></a>DecodeLib_Quency</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, decode_lib.o(.text.DecodeLib_Quency))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DecodeLib_Quency &rArr; Decode_Query &rArr; Decode_SetPolarityRising &rArr; LL_TIM_IC_SetPolarity
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Query
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_Query
</UL>

<P><STRONG><a name="[f9]"></a>DecodeLib_START</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, decode_lib.o(.text.DecodeLib_START))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DecodeLib_START &rArr; Decode_START &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_START
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_START
</UL>

<P><STRONG><a name="[fb]"></a>DecodeLib_STOP</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, decode_lib.o(.text.DecodeLib_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DecodeLib_STOP &rArr; Decode_STOP &rArr; LL_GPIO_ResetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_STOP
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_STOP
</UL>

<P><STRONG><a name="[fd]"></a>DecodeLib_ScanRST</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, decode_lib.o(.text.DecodeLib_ScanRST))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DecodeLib_ScanRST &rArr; Decode_ScanRST &rArr; Decode_GetRST &rArr; LL_GPIO_IsInputPinSet
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_ScanRST
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_ScanRST
</UL>

<P><STRONG><a name="[ff]"></a>DecodeTask_ActivateSites</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, decode_task.o(.text.DecodeTask_ActivateSites))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DecodeTask_ActivateSites &rArr; DecodeLib_ActivateSites &rArr; Decode_ActivateSites
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeLib_ActivateSites
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_QueryInit
</UL>

<P><STRONG><a name="[100]"></a>DecodeTask_ClearState</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, decode_task.o(.text.DecodeTask_ClearState))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DecodeTask_ClearState &rArr; DecodeLib_ClearState &rArr; Decode_ClearState
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeLib_ClearState
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_QueryInit
</UL>

<P><STRONG><a name="[101]"></a>DecodeTask_IRQTask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, decode_task.o(.text.DecodeTask_IRQTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DecodeTask_IRQTask &rArr; DecodeLib_IRQTask &rArr; Decode_IRQTask &rArr; Decode_CaptureHandler &rArr; LL_TIM_IC_SetPolarity
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeLib_IRQTask
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>DecodeTask_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, decode_task.o(.text.DecodeTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DecodeTask_Init &rArr; DecodeLib_Init &rArr; Decode_Init &rArr; Decode_DecodeTimerInit &rArr; LL_TIM_DeInit &rArr; LL_APB2_GRP1_ReleaseReset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeLib_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[103]"></a>DecodeTask_Query</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, decode_task.o(.text.DecodeTask_Query))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DecodeTask_Query &rArr; DecodeLib_Quency &rArr; Decode_Query &rArr; Decode_SetPolarityRising &rArr; LL_TIM_IC_SetPolarity
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeLib_Quency
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>DecodeTask_QueryInit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, decode_task.o(.text.DecodeTask_QueryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DecodeTask_QueryInit &rArr; DecodeTask_START &rArr; DecodeLib_START &rArr; Decode_START &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_START
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_ClearState
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_ActivateSites
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[105]"></a>DecodeTask_START</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, decode_task.o(.text.DecodeTask_START))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DecodeTask_START &rArr; DecodeLib_START &rArr; Decode_START &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeLib_START
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_KeyTask
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_QueryInit
</UL>

<P><STRONG><a name="[106]"></a>DecodeTask_STOP</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, decode_task.o(.text.DecodeTask_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DecodeTask_STOP &rArr; DecodeLib_STOP &rArr; Decode_STOP &rArr; LL_GPIO_ResetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeLib_STOP
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentScan
</UL>

<P><STRONG><a name="[107]"></a>DecodeTask_ScanRST</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, decode_task.o(.text.DecodeTask_ScanRST))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DecodeTask_ScanRST &rArr; DecodeLib_ScanRST &rArr; Decode_ScanRST &rArr; Decode_GetRST &rArr; LL_GPIO_IsInputPinSet
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeLib_ScanRST
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>Decode_ActivateSites</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, decode_cfg.o(.text.Decode_ActivateSites))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Decode_ActivateSites
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeLib_ActivateSites
</UL>

<P><STRONG><a name="[13a]"></a>Decode_AddBit</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, decode_cfg.o(.text.Decode_AddBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Decode_AddBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Query
</UL>

<P><STRONG><a name="[139]"></a>Decode_CalcHighPulseWidth</STRONG> (Thumb, 502 bytes, Stack size 44 bytes, decode_cfg.o(.text.Decode_CalcHighPulseWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Decode_CalcHighPulseWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Query
</UL>

<P><STRONG><a name="[13b]"></a>Decode_CalcLowPulseWidth</STRONG> (Thumb, 502 bytes, Stack size 44 bytes, decode_cfg.o(.text.Decode_CalcLowPulseWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Decode_CalcLowPulseWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Query
</UL>

<P><STRONG><a name="[108]"></a>Decode_CaptureHandler</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, decode_cfg.o(.text.Decode_CaptureHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Decode_CaptureHandler &rArr; LL_TIM_IC_SetPolarity
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_SetPolarity
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_GetPolarity
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_IRQTask
</UL>

<P><STRONG><a name="[f2]"></a>Decode_ClearState</STRONG> (Thumb, 168 bytes, Stack size 4 bytes, decode_cfg.o(.text.Decode_ClearState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Decode_ClearState
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeLib_ClearState
</UL>

<P><STRONG><a name="[10b]"></a>Decode_DecodeCHInit</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, decode_cfg.o(.text.Decode_DecodeCHInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Decode_DecodeCHInit &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTask_Clock
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Init
</UL>

<P><STRONG><a name="[10d]"></a>Decode_DecodeLED</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, decode_cfg.o(.text.Decode_DecodeLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Decode_DecodeLED &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Query
</UL>

<P><STRONG><a name="[10f]"></a>Decode_DecodeLEDInit</STRONG> (Thumb, 208 bytes, Stack size 72 bytes, decode_cfg.o(.text.Decode_DecodeLEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Decode_DecodeLEDInit &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTask_Clock
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Init
</UL>

<P><STRONG><a name="[110]"></a>Decode_DecodePass</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, decode_cfg.o(.text.Decode_DecodePass))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Decode_DecodePass &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Query
</UL>

<P><STRONG><a name="[111]"></a>Decode_DecodePassInit</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, decode_cfg.o(.text.Decode_DecodePassInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Decode_DecodePassInit &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTask_Clock
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Init
</UL>

<P><STRONG><a name="[112]"></a>Decode_DecodeRSTInit</STRONG> (Thumb, 214 bytes, Stack size 80 bytes, decode_cfg.o(.text.Decode_DecodeRSTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Decode_DecodeRSTInit &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTask_Clock
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Init
</UL>

<P><STRONG><a name="[113]"></a>Decode_DecodeTimerInit</STRONG> (Thumb, 310 bytes, Stack size 96 bytes, decode_cfg.o(.text.Decode_DecodeTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Decode_DecodeTimerInit &rArr; LL_TIM_DeInit &rArr; LL_APB2_GRP1_ReleaseReset
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_ClearFlag
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DeInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTask_Clock
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetTriggerOutput
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetClockSource
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableIT_UPDATE
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableIT_CC4
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableIT_CC3
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableIT_CC2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableIT_CC1
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableMasterSlaveMode
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableARRPreload
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Init
</UL>

<P><STRONG><a name="[127]"></a>Decode_GetRST</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, decode_cfg.o(.text.Decode_GetRST))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Decode_GetRST &rArr; LL_GPIO_IsInputPinSet
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_ScanRST
</UL>

<P><STRONG><a name="[f4]"></a>Decode_IRQTask</STRONG> (Thumb, 426 bytes, Stack size 32 bytes, decode_cfg.o(.text.Decode_IRQTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Decode_IRQTask &rArr; Decode_CaptureHandler &rArr; LL_TIM_IC_SetPolarity
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_CaptureHandler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IsActiveFlag_UPDATE
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IsActiveFlag_CC4
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IsActiveFlag_CC3
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IsActiveFlag_CC2
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IsActiveFlag_CC1
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_GetCaptureCH4
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_GetCaptureCH3
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_GetCaptureCH2
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_GetCaptureCH1
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_ClearFlag_UPDATE
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_ClearFlag_CC4
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_ClearFlag_CC3
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_ClearFlag_CC2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_ClearFlag_CC1
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeLib_IRQTask
</UL>

<P><STRONG><a name="[f6]"></a>Decode_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, decode_cfg.o(.text.Decode_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Decode_Init &rArr; Decode_DecodeTimerInit &rArr; LL_TIM_DeInit &rArr; LL_APB2_GRP1_ReleaseReset
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeRSTInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodePassInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeLEDInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeCHInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeLib_Init
</UL>

<P><STRONG><a name="[f8]"></a>Decode_Query</STRONG> (Thumb, 990 bytes, Stack size 40 bytes, decode_cfg.o(.text.Decode_Query))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Decode_Query &rArr; Decode_SetPolarityRising &rArr; LL_TIM_IC_SetPolarity
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_SetPolarityRising
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodePass
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeLED
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_CalcLowPulseWidth
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_CalcHighPulseWidth
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_AddBit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeLib_Quency
</UL>

<P><STRONG><a name="[fa]"></a>Decode_START</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, decode_cfg.o(.text.Decode_START))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Decode_START &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounter
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableCounter
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_ClearFlag_UPDATE
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_ClearFlag_CC4
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_ClearFlag_CC3
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_ClearFlag_CC2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_ClearFlag_CC1
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeLib_START
</UL>

<P><STRONG><a name="[fc]"></a>Decode_STOP</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, decode_cfg.o(.text.Decode_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Decode_STOP &rArr; LL_GPIO_ResetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableCounter
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeLib_STOP
</UL>

<P><STRONG><a name="[fe]"></a>Decode_ScanRST</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, decode_cfg.o(.text.Decode_ScanRST))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Decode_ScanRST &rArr; Decode_GetRST &rArr; LL_GPIO_IsInputPinSet
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_GetRST
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeLib_ScanRST
</UL>

<P><STRONG><a name="[138]"></a>Decode_SetPolarityRising</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, decode_cfg.o(.text.Decode_SetPolarityRising))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Decode_SetPolarityRising &rArr; LL_TIM_IC_SetPolarity
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_SetPolarity
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Query
</UL>

<P><STRONG><a name="[13e]"></a>DelayLib_ms</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, delay_lib.o(.text.DelayLib_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DelayLib_ms &rArr; Delay_ms &rArr; DelayN_ms &rArr; DelayN_us &rArr; SysTickTask_WaitusTick &rArr; SysTickLib_WaitusTick &rArr; SysTick_WaitusTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTask_ms
</UL>

<P><STRONG><a name="[140]"></a>DelayNLib_us</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, delay_lib.o(.text.DelayNLib_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DelayNLib_us &rArr; DelayN_us &rArr; SysTickTask_WaitusTick &rArr; SysTickLib_WaitusTick &rArr; SysTick_WaitusTick
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_us
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTask_us
</UL>

<P><STRONG><a name="[142]"></a>DelayN_ms</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, delay_cfg.o(.text.DelayN_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DelayN_ms &rArr; DelayN_us &rArr; SysTickTask_WaitusTick &rArr; SysTickLib_WaitusTick &rArr; SysTick_WaitusTick
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGTask_Reset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_us
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[141]"></a>DelayN_us</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, delay_cfg.o(.text.DelayN_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DelayN_us &rArr; SysTickTask_WaitusTick &rArr; SysTickLib_WaitusTick &rArr; SysTick_WaitusTick
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickTask_WaitusTick
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNLib_us
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_ms
</UL>

<P><STRONG><a name="[145]"></a>DelayTask_ms</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, delay_task.o(.text.DelayTask_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DelayTask_ms &rArr; DelayLib_ms &rArr; Delay_ms &rArr; DelayN_ms &rArr; DelayN_us &rArr; SysTickTask_WaitusTick &rArr; SysTickLib_WaitusTick &rArr; SysTick_WaitusTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayLib_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentScan
</UL>

<P><STRONG><a name="[49]"></a>DelayTask_us</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, delay_task.o(.text.DelayTask_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DelayTask_us &rArr; DelayNLib_us &rArr; DelayN_us &rArr; SysTickTask_WaitusTick &rArr; SysTickLib_WaitusTick &rArr; SysTick_WaitusTick
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNLib_us
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text.Sys_Init)
<LI> i2c_cfg.o(.text.I2C_MSW_Init)
</UL>
<P><STRONG><a name="[13f]"></a>Delay_ms</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, delay_cfg.o(.text.Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Delay_ms &rArr; DelayN_ms &rArr; DelayN_us &rArr; SysTickTask_WaitusTick &rArr; SysTickLib_WaitusTick &rArr; SysTick_WaitusTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickTask_DecTick
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickTask_1msIncTick
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayLib_ms
</UL>

<P><STRONG><a name="[a4]"></a>DescSortFun2</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, complier_lib.o(.text.DescSortFun2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DescSortFun2
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HandleChannelVal
</UL>

<P><STRONG><a name="[148]"></a>EEPROMLib_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, eeprom_lib.o(.text.EEPROMLib_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EEPROMLib_Init &rArr; EEPROM_Init &rArr; FLASHTask_ReadHalfWord &rArr; FLASHLib_ReadHalfWord &rArr; FLASH_ReadHalfWord &rArr; LL_FLASH_ReadHalfWord
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMTask_Init
</UL>

<P><STRONG><a name="[14a]"></a>EEPROMTask_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, eeprom_task.o(.text.EEPROMTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EEPROMTask_Init &rArr; EEPROMLib_Init &rArr; EEPROM_Init &rArr; FLASHTask_ReadHalfWord &rArr; FLASHLib_ReadHalfWord &rArr; FLASH_ReadHalfWord &rArr; LL_FLASH_ReadHalfWord
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMLib_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[149]"></a>EEPROM_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, eeprom_cfg.o(.text.EEPROM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EEPROM_Init &rArr; FLASHTask_ReadHalfWord &rArr; FLASHLib_ReadHalfWord &rArr; FLASH_ReadHalfWord &rArr; LL_FLASH_ReadHalfWord
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASHTask_ReadHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMLib_Init
</UL>

<P><STRONG><a name="[14c]"></a>FLASHLib_ReadHalfWord</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, flash_lib.o(.text.FLASHLib_ReadHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FLASHLib_ReadHalfWord &rArr; FLASH_ReadHalfWord &rArr; LL_FLASH_ReadHalfWord
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASHTask_ReadHalfWord
</UL>

<P><STRONG><a name="[14b]"></a>FLASHTask_ReadHalfWord</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, flash_task.o(.text.FLASHTask_ReadHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FLASHTask_ReadHalfWord &rArr; FLASHLib_ReadHalfWord &rArr; FLASH_ReadHalfWord &rArr; LL_FLASH_ReadHalfWord
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASHLib_ReadHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Init
</UL>

<P><STRONG><a name="[14d]"></a>FLASH_ReadHalfWord</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, flash_cfg.o(.text.FLASH_ReadHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_ReadHalfWord &rArr; LL_FLASH_ReadHalfWord
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_ReadHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASHLib_ReadHalfWord
</UL>

<P><STRONG><a name="[14f]"></a>FlashLib_LockRead</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash_lib.o(.text.FlashLib_LockRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FlashLib_LockRead &rArr; Flash_LockRead &rArr; LL_FLASH_OB_RDP_LevelConfig &rArr; LL_FLASH_WaitBank1Operation &rArr; LL_FLASH_GetBank1State
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockRead
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTask_LockRead
</UL>

<P><STRONG><a name="[151]"></a>FlashTask_LockRead</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash_task.o(.text.FlashTask_LockRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FlashTask_LockRead &rArr; FlashLib_LockRead &rArr; Flash_LockRead &rArr; LL_FLASH_OB_RDP_LevelConfig &rArr; LL_FLASH_WaitBank1Operation &rArr; LL_FLASH_GetBank1State
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashLib_LockRead
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[150]"></a>Flash_LockRead</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, flash_cfg.o(.text.Flash_LockRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Flash_LockRead &rArr; LL_FLASH_OB_RDP_LevelConfig &rArr; LL_FLASH_WaitBank1Operation &rArr; LL_FLASH_GetBank1State
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_Unlock
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_OB_Unlock
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_OB_RDP_LevelConfig
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_OB_Lock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_OB_GetWRP
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_OB_GetUser
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_OB_GetRDP
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_Lock
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_DisablePrefetch
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashLib_LockRead
</UL>

<P><STRONG><a name="[15b]"></a>GPIOLib_Clock</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gpio_lib.o(.text.GPIOLib_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GPIOLib_Clock &rArr; GPIO_Clock &rArr; LL_APB2_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTask_Clock
</UL>

<P><STRONG><a name="[15d]"></a>GPIOLib_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gpio_lib.o(.text.GPIOLib_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GPIOLib_Init &rArr; GPIO_Init &rArr; GPIO_Clock &rArr; LL_APB2_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTask_Init
</UL>

<P><STRONG><a name="[a2]"></a>GPIOTask_Clock</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gpio_task.o(.text.GPIOTask_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GPIOTask_Clock &rArr; GPIOLib_Clock &rArr; GPIO_Clock &rArr; LL_APB2_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOLib_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_I2C_Device0_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeRSTInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodePassInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeLEDInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeCHInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDWork_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDDebug_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SOTInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_EOTInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BINInit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_YSELInit
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_ClkInit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[15f]"></a>GPIOTask_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gpio_task.o(.text.GPIOTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPIOTask_Init &rArr; GPIOLib_Init &rArr; GPIO_Init &rArr; GPIO_Clock &rArr; LL_APB2_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOLib_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[15c]"></a>GPIO_Clock</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, gpio_cfg.o(.text.GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_Clock &rArr; LL_APB2_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOLib_Clock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreqMode_Init
</UL>

<P><STRONG><a name="[15e]"></a>GPIO_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, gpio_cfg.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO_Init &rArr; GPIO_Clock &rArr; LL_APB2_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Clock
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_AF_Remap_SWJ_NONJTRST
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_AF_Remap_SWJ_NOJTAG
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOLib_Init
</UL>

<P><STRONG><a name="[4b]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal.o(.text.HAL_IncTick))
<BR>[Address Reference Count : 1]<UL><LI> systick_cfg.o(.text.SysTick_Init)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[164]"></a>I2CLib_MSW_Init</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, i2c_lib.o(.text.I2CLib_MSW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = I2CLib_MSW_Init &rArr; I2C_MSW_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_Init
</UL>

<P><STRONG><a name="[166]"></a>I2CLib_MSW_ReadACK</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c_lib.o(.text.I2CLib_MSW_ReadACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2CLib_MSW_ReadACK &rArr; I2C_MSW_ReadACK &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_ReadACK
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_ReadACK
</UL>

<P><STRONG><a name="[168]"></a>I2CLib_MSW_ReadByte</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c_lib.o(.text.I2CLib_MSW_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2CLib_MSW_ReadByte &rArr; I2C_MSW_ReadByte &rArr; I2C_MSW_ReadBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_ReadByte
</UL>

<P><STRONG><a name="[16a]"></a>I2CLib_MSW_START</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, i2c_lib.o(.text.I2CLib_MSW_START))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_SendByte
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_START
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_ReadACK
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_START
</UL>

<P><STRONG><a name="[16d]"></a>I2CLib_MSW_STOP</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c_lib.o(.text.I2CLib_MSW_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2CLib_MSW_STOP &rArr; I2C_MSW_STOP &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_STOP
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_STOP
</UL>

<P><STRONG><a name="[16f]"></a>I2CLib_MSW_SendACK</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, i2c_lib.o(.text.I2CLib_MSW_SendACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2CLib_MSW_SendACK &rArr; I2C_MSW_SendACK &rArr; I2C_MSW_NACK &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_SendACK
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_SendACK
</UL>

<P><STRONG><a name="[171]"></a>I2CLib_MSW_SendByte</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, i2c_lib.o(.text.I2CLib_MSW_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = I2CLib_MSW_SendByte &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_SendByte
</UL>

<P><STRONG><a name="[b6]"></a>I2CTask_MHW_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c_task.o(.text.I2CTask_MHW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2CTask_MHW_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_I2C_Init
</UL>

<P><STRONG><a name="[b7]"></a>I2CTask_MSW_Init</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, i2c_task.o(.text.I2CTask_MSW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = I2CTask_MSW_Init &rArr; I2CLib_MSW_Init &rArr; I2C_MSW_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CLib_MSW_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_I2C_Init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_Init
</UL>

<P><STRONG><a name="[be]"></a>I2CTask_MSW_ReadACK</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c_task.o(.text.I2CTask_MSW_ReadACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2CTask_MSW_ReadACK &rArr; I2CLib_MSW_ReadACK &rArr; I2C_MSW_ReadACK &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CLib_MSW_ReadACK
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_SWI2C_WritePageByte
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_SWI2C_ReadPageByte
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_SWI2C_WriteReg
</UL>

<P><STRONG><a name="[bf]"></a>I2CTask_MSW_ReadByte</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c_task.o(.text.I2CTask_MSW_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = I2CTask_MSW_ReadByte &rArr; I2CLib_MSW_ReadByte &rArr; I2C_MSW_ReadByte &rArr; I2C_MSW_ReadBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CLib_MSW_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_SWI2C_ReadPageByte
</UL>

<P><STRONG><a name="[bc]"></a>I2CTask_MSW_START</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, i2c_task.o(.text.I2CTask_MSW_START))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CLib_MSW_START
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_SWI2C_WritePageByte
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_SWI2C_ReadPageByte
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_SWI2C_WriteReg
</UL>

<P><STRONG><a name="[c1]"></a>I2CTask_MSW_STOP</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c_task.o(.text.I2CTask_MSW_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2CTask_MSW_STOP &rArr; I2CLib_MSW_STOP &rArr; I2C_MSW_STOP &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CLib_MSW_STOP
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_SWI2C_WritePageByte
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_SWI2C_ReadPageByte
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_SWI2C_WriteReg
</UL>

<P><STRONG><a name="[c0]"></a>I2CTask_MSW_SendACK</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, i2c_task.o(.text.I2CTask_MSW_SendACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2CTask_MSW_SendACK &rArr; I2CLib_MSW_SendACK &rArr; I2C_MSW_SendACK &rArr; I2C_MSW_NACK &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CLib_MSW_SendACK
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_SWI2C_ReadPageByte
</UL>

<P><STRONG><a name="[bd]"></a>I2CTask_MSW_SendByte</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, i2c_task.o(.text.I2CTask_MSW_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = I2CTask_MSW_SendByte &rArr; I2CLib_MSW_SendByte &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CLib_MSW_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_SWI2C_WritePageByte
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_SWI2C_ReadPageByte
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_SWI2C_WriteReg
</UL>

<P><STRONG><a name="[172]"></a>I2C_MSW_ACK</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, i2c_cfg.o(.text.I2C_MSW_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_MSW_ACK &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_SendACK
</UL>

<P><STRONG><a name="[165]"></a>I2C_MSW_Init</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, i2c_cfg.o(.text.I2C_MSW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = I2C_MSW_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTask_Clock
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CLib_MSW_Init
</UL>

<P><STRONG><a name="[175]"></a>I2C_MSW_NACK</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, i2c_cfg.o(.text.I2C_MSW_NACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_MSW_NACK &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_SendACK
</UL>

<P><STRONG><a name="[167]"></a>I2C_MSW_ReadACK</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, i2c_cfg.o(.text.I2C_MSW_ReadACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_MSW_ReadACK &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CLib_MSW_START
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CLib_MSW_ReadACK
</UL>

<P><STRONG><a name="[177]"></a>I2C_MSW_ReadBit</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, i2c_cfg.o(.text.I2C_MSW_ReadBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_MSW_ReadBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_ReadByte
</UL>

<P><STRONG><a name="[169]"></a>I2C_MSW_ReadByte</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, i2c_cfg.o(.text.I2C_MSW_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_MSW_ReadByte &rArr; I2C_MSW_ReadBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_ReadBit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CLib_MSW_ReadByte
</UL>

<P><STRONG><a name="[16b]"></a>I2C_MSW_START</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, i2c_cfg.o(.text.I2C_MSW_START))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_MSW_START &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CLib_MSW_START
</UL>

<P><STRONG><a name="[16e]"></a>I2C_MSW_STOP</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, i2c_cfg.o(.text.I2C_MSW_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_MSW_STOP &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CLib_MSW_STOP
</UL>

<P><STRONG><a name="[170]"></a>I2C_MSW_SendACK</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, i2c_cfg.o(.text.I2C_MSW_SendACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_MSW_SendACK &rArr; I2C_MSW_NACK &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_NACK
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_ACK
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CLib_MSW_SendACK
</UL>

<P><STRONG><a name="[178]"></a>I2C_MSW_SendBit</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, i2c_cfg.o(.text.I2C_MSW_SendBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_SendByte
</UL>

<P><STRONG><a name="[16c]"></a>I2C_MSW_SendByte</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, i2c_cfg.o(.text.I2C_MSW_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_SendBit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CLib_MSW_SendByte
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CLib_MSW_START
</UL>

<P><STRONG><a name="[179]"></a>IWDGLib_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, iwdg_lib.o(.text.IWDGLib_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IWDGLib_Init &rArr; IWDG_Init &rArr; LL_IWDG_SetReloadCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGTask_Init
</UL>

<P><STRONG><a name="[17b]"></a>IWDGLib_Reset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, iwdg_lib.o(.text.IWDGLib_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IWDGLib_Reset &rArr; IWDG_Reset &rArr; LL_IWDG_ReloadCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGTask_Reset
</UL>

<P><STRONG><a name="[17d]"></a>IWDGTask_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, iwdg_task.o(.text.IWDGTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IWDGTask_Init &rArr; IWDGLib_Init &rArr; IWDG_Init &rArr; LL_IWDG_SetReloadCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGLib_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[143]"></a>IWDGTask_Reset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, iwdg_task.o(.text.IWDGTask_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IWDGTask_Reset &rArr; IWDGLib_Reset &rArr; IWDG_Reset &rArr; LL_IWDG_ReloadCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGLib_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_ms
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Printf
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentScan
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PollMode_WriteByte
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DecTick
</UL>

<P><STRONG><a name="[17a]"></a>IWDG_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, iwdg_cfg.o(.text.IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IWDG_Init &rArr; LL_IWDG_SetReloadCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irq_enable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irq_disable
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IWDG_SetReloadCounter
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IWDG_SetPrescaler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IWDG_ReloadCounter
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IWDG_IsReady
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IWDG_EnableWriteAccess
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGLib_Init
</UL>

<P><STRONG><a name="[17c]"></a>IWDG_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, iwdg_cfg.o(.text.IWDG_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDG_Reset &rArr; LL_IWDG_ReloadCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGLib_Reset
</UL>

<P><STRONG><a name="[185]"></a>KeyLib_BINAPass</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, key_lib.o(.text.KeyLib_BINAPass))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KeyLib_BINAPass &rArr; Key_BINAPass &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BINAPass
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask_BINAPass
</UL>

<P><STRONG><a name="[187]"></a>KeyLib_BINBPass</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, key_lib.o(.text.KeyLib_BINBPass))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KeyLib_BINBPass &rArr; Key_BINBPass &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BINBPass
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask_BINBPass
</UL>

<P><STRONG><a name="[189]"></a>KeyLib_BINCPass</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, key_lib.o(.text.KeyLib_BINCPass))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KeyLib_BINCPass &rArr; Key_BINCPass &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BINCPass
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask_BINCPass
</UL>

<P><STRONG><a name="[18b]"></a>KeyLib_BINDPass</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, key_lib.o(.text.KeyLib_BINDPass))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KeyLib_BINDPass &rArr; Key_BINDPass &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BINDPass
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask_BINDPass
</UL>

<P><STRONG><a name="[18d]"></a>KeyLib_EOTSTART</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, key_lib.o(.text.KeyLib_EOTSTART))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = KeyLib_EOTSTART &rArr; Key_EOTSTART &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_EOTSTART
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask_EOTSTART
</UL>

<P><STRONG><a name="[18f]"></a>KeyLib_EOTSTOP</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, key_lib.o(.text.KeyLib_EOTSTOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KeyLib_EOTSTOP &rArr; Key_EOTSTOP &rArr; LL_GPIO_ResetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_EOTSTOP
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask_EOTSTOP
</UL>

<P><STRONG><a name="[191]"></a>KeyLib_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, key_lib.o(.text.KeyLib_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = KeyLib_Init &rArr; Key_Init &rArr; Key_SOTInit &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask_Init
</UL>

<P><STRONG><a name="[193]"></a>KeyLib_ScanSOT</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, key_lib.o(.text.KeyLib_ScanSOT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = KeyLib_ScanSOT &rArr; Key_ScanSOT &rArr; Key_GetSOT &rArr; LL_GPIO_IsInputPinSet
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ScanSOT
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask_ScanSOT
</UL>

<P><STRONG><a name="[195]"></a>KeyTask_BINAPass</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, key_task.o(.text.KeyTask_BINAPass))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = KeyTask_BINAPass &rArr; KeyLib_BINAPass &rArr; Key_BINAPass &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLib_BINAPass
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_BINPass
</UL>

<P><STRONG><a name="[196]"></a>KeyTask_BINBPass</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, key_task.o(.text.KeyTask_BINBPass))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = KeyTask_BINBPass &rArr; KeyLib_BINBPass &rArr; Key_BINBPass &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLib_BINBPass
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_BINPass
</UL>

<P><STRONG><a name="[197]"></a>KeyTask_BINCPass</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, key_task.o(.text.KeyTask_BINCPass))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = KeyTask_BINCPass &rArr; KeyLib_BINCPass &rArr; Key_BINCPass &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLib_BINCPass
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_BINPass
</UL>

<P><STRONG><a name="[198]"></a>KeyTask_BINDPass</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, key_task.o(.text.KeyTask_BINDPass))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = KeyTask_BINDPass &rArr; KeyLib_BINDPass &rArr; Key_BINDPass &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLib_BINDPass
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_BINPass
</UL>

<P><STRONG><a name="[199]"></a>KeyTask_EOTSTART</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, key_task.o(.text.KeyTask_EOTSTART))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = KeyTask_EOTSTART &rArr; KeyLib_EOTSTART &rArr; Key_EOTSTART &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLib_EOTSTART
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_EOTSTART
</UL>

<P><STRONG><a name="[19a]"></a>KeyTask_EOTSTOP</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, key_task.o(.text.KeyTask_EOTSTOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = KeyTask_EOTSTOP &rArr; KeyLib_EOTSTOP &rArr; Key_EOTSTOP &rArr; LL_GPIO_ResetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLib_EOTSTOP
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_EOTSTOP
</UL>

<P><STRONG><a name="[19b]"></a>KeyTask_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, key_task.o(.text.KeyTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = KeyTask_Init &rArr; KeyLib_Init &rArr; Key_Init &rArr; Key_SOTInit &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLib_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[19c]"></a>KeyTask_ScanSOT</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, key_task.o(.text.KeyTask_ScanSOT))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = KeyTask_ScanSOT &rArr; KeyLib_ScanSOT &rArr; Key_ScanSOT &rArr; Key_GetSOT &rArr; LL_GPIO_IsInputPinSet
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLib_ScanSOT
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[186]"></a>Key_BINAPass</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, key_cfg.o(.text.Key_BINAPass))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_BINAPass &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLib_BINAPass
</UL>

<P><STRONG><a name="[188]"></a>Key_BINBPass</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, key_cfg.o(.text.Key_BINBPass))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_BINBPass &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLib_BINBPass
</UL>

<P><STRONG><a name="[18a]"></a>Key_BINCPass</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, key_cfg.o(.text.Key_BINCPass))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_BINCPass &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLib_BINCPass
</UL>

<P><STRONG><a name="[18c]"></a>Key_BINDPass</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, key_cfg.o(.text.Key_BINDPass))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_BINDPass &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLib_BINDPass
</UL>

<P><STRONG><a name="[19f]"></a>Key_BINInit</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, key_cfg.o(.text.Key_BINInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Key_BINInit &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTask_Clock
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
</UL>

<P><STRONG><a name="[1a0]"></a>Key_EOTInit</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, key_cfg.o(.text.Key_EOTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Key_EOTInit &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTask_Clock
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
</UL>

<P><STRONG><a name="[18e]"></a>Key_EOTSTART</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, key_cfg.o(.text.Key_EOTSTART))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Key_EOTSTART &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLib_EOTSTART
</UL>

<P><STRONG><a name="[190]"></a>Key_EOTSTOP</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, key_cfg.o(.text.Key_EOTSTOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Key_EOTSTOP &rArr; LL_GPIO_ResetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLib_EOTSTOP
</UL>

<P><STRONG><a name="[1a1]"></a>Key_GetSOT</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, key_cfg.o(.text.Key_GetSOT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_GetSOT &rArr; LL_GPIO_IsInputPinSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ScanSOT
</UL>

<P><STRONG><a name="[192]"></a>Key_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, key_cfg.o(.text.Key_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Key_Init &rArr; Key_SOTInit &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SOTInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_EOTInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BINInit
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLib_Init
</UL>

<P><STRONG><a name="[1a3]"></a>Key_SOTInit</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, key_cfg.o(.text.Key_SOTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Key_SOTInit &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTask_Clock
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
</UL>

<P><STRONG><a name="[194]"></a>Key_ScanSOT</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, key_cfg.o(.text.Key_ScanSOT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Key_ScanSOT &rArr; Key_GetSOT &rArr; LL_GPIO_IsInputPinSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetSOT
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLib_ScanSOT
</UL>

<P><STRONG><a name="[1a4]"></a>LEDDebug_Init</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, led_cfg.o(.text.LEDDebug_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LEDDebug_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTask_Clock
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[1a6]"></a>LEDLib_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, led_lib.o(.text.LEDLib_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = LEDLib_Init &rArr; LED_Init &rArr; LEDWork_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTask_Init
</UL>

<P><STRONG><a name="[1a8]"></a>LEDTask_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, led_task.o(.text.LEDTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = LEDTask_Init &rArr; LEDLib_Init &rArr; LED_Init &rArr; LEDWork_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDLib_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[1a9]"></a>LEDWork_Init</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, led_cfg.o(.text.LEDWork_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = LEDWork_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTask_Clock
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickTask_FuncTick
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[4a]"></a>LEDWork_Task</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, led_cfg.o(.text.LEDWork_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LEDWork_Task &rArr; LL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_TogglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led_cfg.o(.text.LEDWork_Init)
</UL>
<P><STRONG><a name="[1a7]"></a>LED_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, led_cfg.o(.text.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = LED_Init &rArr; LEDWork_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDWork_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDDebug_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDLib_Init
</UL>

<P><STRONG><a name="[93]"></a>LL_ADC_CommonInit</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, stm32f1xx_ll_adc.o(.text.LL_ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_ADC_CommonInit &rArr; LL_ADC_IsEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_Init
</UL>

<P><STRONG><a name="[8e]"></a>LL_ADC_DeInit</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, stm32f1xx_ll_adc.o(.text.LL_ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_ADC_DeInit &rArr; LL_ADC_REG_SetTriggerSource
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetTriggerSource
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_SetTriggerSource
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_Init
</UL>

<P><STRONG><a name="[90]"></a>LL_ADC_Init</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, stm32f1xx_ll_adc.o(.text.LL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_ADC_Init &rArr; LL_ADC_IsEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_Init
</UL>

<P><STRONG><a name="[91]"></a>LL_ADC_REG_Init</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, stm32f1xx_ll_adc.o(.text.LL_ADC_REG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_ADC_REG_Init &rArr; LL_ADC_REG_SetSequencerLength
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerLength
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_Init
</UL>

<P><STRONG><a name="[db]"></a>LL_CRC_DeInit</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, stm32f1xx_ll_crc.o(.text.LL_CRC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_CRC_DeInit &rArr; LL_CRC_Write_IDR
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CRC_Write_IDR
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CRC_ResetCRCCalculationUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_DeInit
</UL>

<P><STRONG><a name="[79]"></a>LL_DMA_DeInit</STRONG> (Thumb, 646 bytes, Stack size 80 bytes, stm32f1xx_ll_dma.o(.text.LL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LL_DMA_DeInit &rArr; LL_DMA_ClearFlag_GI7
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_ClearFlag_GI7
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_ClearFlag_GI6
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_ClearFlag_GI5
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_ClearFlag_GI4
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_ClearFlag_GI3
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_ClearFlag_GI2
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_ClearFlag_GI1
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Init
</UL>

<P><STRONG><a name="[7c]"></a>LL_DMA_Init</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, stm32f1xx_ll_dma.o(.text.LL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LL_DMA_Init &rArr; LL_DMA_SetPeriphAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_ConfigTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Init
</UL>

<P><STRONG><a name="[1c1]"></a>LL_FLASH_DisableDataCache</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_cfg.o(.text.LL_FLASH_DisableDataCache))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_Unlock
</UL>

<P><STRONG><a name="[1be]"></a>LL_FLASH_EnableDataCache</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_cfg.o(.text.LL_FLASH_EnableDataCache))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_Lock
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[266]"></a>LL_FLASH_EnableInstCache</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_cfg.o(.text.LL_FLASH_EnableInstCache))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1c3]"></a>LL_FLASH_GetBank1State</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32_cfg.o(.text.LL_FLASH_GetBank1State))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_FLASH_GetBank1State
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_WaitBank1Operation
</UL>

<P><STRONG><a name="[15a]"></a>LL_FLASH_Lock</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32_cfg.o(.text.LL_FLASH_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_FLASH_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_EnableDataCache
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_EnablePrefetch
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockRead
</UL>

<P><STRONG><a name="[154]"></a>LL_FLASH_OB_GetRDP</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32_cfg.o(.text.LL_FLASH_OB_GetRDP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_FLASH_OB_GetRDP
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockRead
</UL>

<P><STRONG><a name="[155]"></a>LL_FLASH_OB_GetUser</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32_cfg.o(.text.LL_FLASH_OB_GetUser))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockRead
</UL>

<P><STRONG><a name="[153]"></a>LL_FLASH_OB_GetWRP</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_cfg.o(.text.LL_FLASH_OB_GetWRP))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockRead
</UL>

<P><STRONG><a name="[159]"></a>LL_FLASH_OB_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_cfg.o(.text.LL_FLASH_OB_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockRead
</UL>

<P><STRONG><a name="[158]"></a>LL_FLASH_OB_RDP_LevelConfig</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32_cfg.o(.text.LL_FLASH_OB_RDP_LevelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LL_FLASH_OB_RDP_LevelConfig &rArr; LL_FLASH_WaitBank1Operation &rArr; LL_FLASH_GetBank1State
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_WaitBank1Operation
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockRead
</UL>

<P><STRONG><a name="[157]"></a>LL_FLASH_OB_Unlock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32_cfg.o(.text.LL_FLASH_OB_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockRead
</UL>

<P><STRONG><a name="[14e]"></a>LL_FLASH_ReadHalfWord</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32_cfg.o(.text.LL_FLASH_ReadHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_FLASH_ReadHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadHalfWord
</UL>

<P><STRONG><a name="[156]"></a>LL_FLASH_Unlock</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32_cfg.o(.text.LL_FLASH_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_FLASH_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_DisableDataCache
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_DisablePrefetch
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockRead
</UL>

<P><STRONG><a name="[1c0]"></a>LL_FLASH_WaitBank1Operation</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32_cfg.o(.text.LL_FLASH_WaitBank1Operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_FLASH_WaitBank1Operation &rArr; LL_FLASH_GetBank1State
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_GetBank1State
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_OB_RDP_LevelConfig
</UL>

<P><STRONG><a name="[a3]"></a>LL_GPIO_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f1xx_ll_gpio.o(.text.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_I2C_Device0_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeRSTInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodePassInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeLEDInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeCHInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDWork_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDDebug_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SOTInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_EOTInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BINInit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_YSELInit
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_ClkInit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreqMode_Init
</UL>

<P><STRONG><a name="[1c8]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f1xx_ll_rcc.o(.text.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2ClockFreq
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[264]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f1xx_ll_utils.o(.text.LL_SetSystemCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SetSystemCoreClock
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[120]"></a>LL_TIM_ClearFlag</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32_cfg.o(.text.LL_TIM_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
</UL>

<P><STRONG><a name="[115]"></a>LL_TIM_DeInit</STRONG> (Thumb, 506 bytes, Stack size 80 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LL_TIM_DeInit &rArr; LL_APB2_GRP1_ReleaseReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_ReleaseReset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_ForceReset
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ReleaseReset
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ForceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
</UL>

<P><STRONG><a name="[11b]"></a>LL_TIM_IC_Init</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_IC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_TIM_IC_Init &rArr; IC4Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC4Config
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC3Config
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC2Config
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
</UL>

<P><STRONG><a name="[116]"></a>LL_TIM_Init</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_TIM_Init &rArr; LL_TIM_SetRepetitionCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetRepetitionCounter
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetPrescaler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetAutoReload
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_UPDATE
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreqMode_Init
</UL>

<P><STRONG><a name="[1d9]"></a>LL_USART_DeInit</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, stm32f1xx_ll_usart.o(.text.LL_USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_USART_DeInit &rArr; LL_APB2_GRP1_ReleaseReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_ReleaseReset
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_ForceReset
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ReleaseReset
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ForceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[1de]"></a>LL_USART_Init</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, stm32f1xx_ll_usart.o(.text.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetStopBitsLength
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetHWFlowCtrl
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabled
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NMI_Handler &rArr; CSSTask_NMI_IRQ &rArr; CSSLib_NMI_IRQ &rArr; CSS_NMI_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSSTask_NMI_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1e3]"></a>NVIC_Init</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, main.o(.text.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = NVIC_Init &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriorityGrouping
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[1e8]"></a>PVDLib_IRQTask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pvd_lib.o(.text.PVDLib_IRQTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PVDLib_IRQTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVDTask_IRQTask
</UL>

<P><STRONG><a name="[1ea]"></a>PVDTask_IRQTask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pvd_task.o(.text.PVDTask_IRQTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PVDTask_IRQTask &rArr; PVDLib_IRQTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVDLib_IRQTask
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
</UL>

<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.PVD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PVD_IRQHandler &rArr; PVDTask_IRQTask &rArr; PVDLib_IRQTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVDTask_IRQTask
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_IsActiveFlag_PVDO
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_ClearFlag_0_31
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1e9]"></a>PVD_IRQTask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pvd_cfg.o(.text.PVD_IRQTask))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVDLib_IRQTask
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1ed]"></a>PowerLib_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, power_lib.o(.text.PowerLib_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = PowerLib_Init &rArr; Power_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerTask_Init
</UL>

<P><STRONG><a name="[1ef]"></a>PowerTask_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, power_task.o(.text.PowerTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = PowerTask_Init &rArr; PowerLib_Init &rArr; Power_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLib_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[1ee]"></a>Power_Init</STRONG> (Thumb, 370 bytes, Stack size 112 bytes, power_cfg.o(.text.Power_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = Power_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTask_Clock
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLib_Init
</UL>

<P><STRONG><a name="[1ca]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, stm32f1xx_ll_rcc.o(.text.RCC_GetHCLKClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetHCLKClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAHBPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[1cb]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stm32f1xx_ll_rcc.o(.text.RCC_GetPCLK1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetPCLK1ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAPB1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[1cc]"></a>RCC_GetPCLK2ClockFreq</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stm32f1xx_ll_rcc.o(.text.RCC_GetPCLK2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetPCLK2ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAPB2Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[1c9]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f1xx_ll_rcc.o(.text.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.RCC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_IRQHandler &rArr; CSSTask_RCC_IRQ &rArr; CSSLib_RCC_IRQ &rArr; CSS_RCC_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSSTask_RCC_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1f5]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, stm32f1xx_ll_rcc.o(.text.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetPrediv
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMultiplicator
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[1f9]"></a>RFASKLib_ActivateSites</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, rfask_lib.o(.text.RFASKLib_ActivateSites))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RFASKLib_ActivateSites &rArr; RFASK_ActivateSites
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_ActivateSites
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_ActivateSites
</UL>

<P><STRONG><a name="[1fb]"></a>RFASKLib_CalcXTAL</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rfask_lib.o(.text.RFASKLib_CalcXTAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RFASKLib_CalcXTAL &rArr; RFASK_CalcXTAL &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_CalcXTAL
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_SetClockFreq
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_CalcXTAL
</UL>

<P><STRONG><a name="[1fd]"></a>RFASKLib_Init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rfask_lib.o(.text.RFASKLib_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = RFASKLib_Init &rArr; RFASK_Init &rArr; RFASK_YSELInit &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_Init
</UL>

<P><STRONG><a name="[1ff]"></a>RFASKLib_ScanYSEL</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rfask_lib.o(.text.RFASKLib_ScanYSEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RFASKLib_ScanYSEL &rArr; RFASK_ScanYSEL &rArr; RFASK_GetYSELD &rArr; LL_GPIO_IsInputPinSet
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_ScanYSEL
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_ScanYSEL
</UL>

<P><STRONG><a name="[201]"></a>RFASKLib_SetFreqCurrentPointCmd</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, rfask_lib.o(.text.RFASKLib_SetFreqCurrentPointCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RFASKLib_SetFreqCurrentPointCmd &rArr; RFASK_SetFreqCurrentPointCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_SetFreqCurrentPointCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_Init
</UL>

<P><STRONG><a name="[203]"></a>RFASKTask_ActivateSites</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, rfask_task.o(.text.RFASKTask_ActivateSites))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RFASKTask_ActivateSites &rArr; RFASKLib_ActivateSites &rArr; RFASK_ActivateSites
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKLib_ActivateSites
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_KeyTask
</UL>

<P><STRONG><a name="[204]"></a>RFASKTask_BINPass</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, rfask_task.o(.text.RFASKTask_BINPass))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RFASKTask_BINPass &rArr; KeyTask_BINDPass &rArr; KeyLib_BINDPass &rArr; Key_BINDPass &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask_BINDPass
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask_BINCPass
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask_BINBPass
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask_BINAPass
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_KeyTask
</UL>

<P><STRONG><a name="[205]"></a>RFASKTask_CalcXTAL</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rfask_task.o(.text.RFASKTask_CalcXTAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RFASKTask_CalcXTAL &rArr; RFASKLib_CalcXTAL &rArr; RFASK_CalcXTAL &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKLib_CalcXTAL
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_YSELTask
</UL>

<P><STRONG><a name="[206]"></a>RFASKTask_EOTSTART</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rfask_task.o(.text.RFASKTask_EOTSTART))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RFASKTask_EOTSTART &rArr; KeyTask_EOTSTART &rArr; KeyLib_EOTSTART &rArr; Key_EOTSTART &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask_EOTSTART
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_KeyTask
</UL>

<P><STRONG><a name="[207]"></a>RFASKTask_EOTSTOP</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rfask_task.o(.text.RFASKTask_EOTSTOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RFASKTask_EOTSTOP &rArr; KeyTask_EOTSTOP &rArr; KeyLib_EOTSTOP &rArr; Key_EOTSTOP &rArr; LL_GPIO_ResetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask_EOTSTOP
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_KeyTask
</UL>

<P><STRONG><a name="[208]"></a>RFASKTask_FreqCurrentHandlerTask</STRONG> (Thumb, 1094 bytes, Stack size 232 bytes, rfask_task.o(.text.RFASKTask_FreqCurrentHandlerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = RFASKTask_FreqCurrentHandlerTask &rArr; USARTTask_RealTime_AddByteSize &rArr; USARTLib_RealTime_AddByteSize &rArr; USART_RealTime_AddByteSize &rArr; USART_RealTime_AddByte &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_RealTime_AddByteSize
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_RealTime_AddByte
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_HandlerTask
</UL>

<P><STRONG><a name="[20b]"></a>RFASKTask_FreqCurrentPointOneTask</STRONG> (Thumb, 1362 bytes, Stack size 208 bytes, rfask_task.o(.text.RFASKTask_FreqCurrentPointOneTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = RFASKTask_FreqCurrentPointOneTask &rArr; RFASKTask_FreqCurrentScan &rArr; RFASKTask_SitesCurrent &rArr; ADCTask_RFASKTask_GetADC &rArr; ADCLib_HandleChannelVal &rArr; ADC_HandleChannelVal &rArr; CalcAvgFun1 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_RealTime_AddByteSize
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_RealTime_AddByte
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentScan
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_HandlerTask
</UL>

<P><STRONG><a name="[20d]"></a>RFASKTask_FreqCurrentPointTwoTask</STRONG> (Thumb, 1362 bytes, Stack size 208 bytes, rfask_task.o(.text.RFASKTask_FreqCurrentPointTwoTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = RFASKTask_FreqCurrentPointTwoTask &rArr; RFASKTask_FreqCurrentScan &rArr; RFASKTask_SitesCurrent &rArr; ADCTask_RFASKTask_GetADC &rArr; ADCLib_HandleChannelVal &rArr; ADC_HandleChannelVal &rArr; CalcAvgFun1 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_RealTime_AddByteSize
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_RealTime_AddByte
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentScan
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_HandlerTask
</UL>

<P><STRONG><a name="[20c]"></a>RFASKTask_FreqCurrentScan</STRONG> (Thumb, 1854 bytes, Stack size 224 bytes, rfask_task.o(.text.RFASKTask_FreqCurrentScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = RFASKTask_FreqCurrentScan &rArr; RFASKTask_SitesCurrent &rArr; ADCTask_RFASKTask_GetADC &rArr; ADCLib_HandleChannelVal &rArr; ADC_HandleChannelVal &rArr; CalcAvgFun1 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGTask_Reset
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTask_ms
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_STOP
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510Task_I2C_SetFreqHzWithAllFreqReg
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510Task_I2C_Reset
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_RealTime_AddByteSize
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_RealTime_AddByte
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_SitesCurrent
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_CalcXTAL
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_KeyTask
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentPointTwoTask
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentPointOneTask
</UL>

<P><STRONG><a name="[213]"></a>RFASKTask_HandlerTask</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, rfask_task.o(.text.RFASKTask_HandlerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = RFASKTask_HandlerTask &rArr; RFASKTask_FreqCurrentPointTwoTask &rArr; RFASKTask_FreqCurrentScan &rArr; RFASKTask_SitesCurrent &rArr; ADCTask_RFASKTask_GetADC &rArr; ADCLib_HandleChannelVal &rArr; ADC_HandleChannelVal &rArr; CalcAvgFun1 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_YSELTask
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_WM8510Task
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentPointTwoTask
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentPointOneTask
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentHandlerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_Task
</UL>

<P><STRONG><a name="[216]"></a>RFASKTask_Init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, rfask_task.o(.text.RFASKTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = RFASKTask_Init &rArr; RFASKLib_Init &rArr; RFASK_Init &rArr; RFASK_YSELInit &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKLib_SetFreqCurrentPointCmd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKLib_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[217]"></a>RFASKTask_KeyTask</STRONG> (Thumb, 1162 bytes, Stack size 192 bytes, rfask_task.o(.text.RFASKTask_KeyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = RFASKTask_KeyTask &rArr; RFASKTask_FreqCurrentScan &rArr; RFASKTask_SitesCurrent &rArr; ADCTask_RFASKTask_GetADC &rArr; ADCLib_HandleChannelVal &rArr; ADC_HandleChannelVal &rArr; CalcAvgFun1 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_START
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510Task_I2C_Reset
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_SetClockFreq
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_ScanYSEL
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentScan
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_EOTSTOP
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_EOTSTART
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_BINPass
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_ActivateSites
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[218]"></a>RFASKTask_ScanYSEL</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rfask_task.o(.text.RFASKTask_ScanYSEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RFASKTask_ScanYSEL &rArr; RFASKLib_ScanYSEL &rArr; RFASK_ScanYSEL &rArr; RFASK_GetYSELD &rArr; LL_GPIO_IsInputPinSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKLib_ScanYSEL
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_KeyTask
</UL>

<P><STRONG><a name="[219]"></a>RFASKTask_SetClockFreq</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, rfask_task.o(.text.RFASKTask_SetClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = RFASKTask_SetClockFreq &rArr; WM8510Task_I2C_SetFreqHzWithAllFreqReg &rArr; WM8510Lib_I2C_SetFreqHzWithAllFreqReg &rArr; WM8510_I2C_SetFreqHzWithAllFreqReg &rArr; WM8510_I2C_SendCMD &rArr; WM8510_SWI2C_WriteReg &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510Task_I2C_SetFreqHzWithAllFreqReg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKLib_CalcXTAL
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_KeyTask
</UL>

<P><STRONG><a name="[211]"></a>RFASKTask_SitesCurrent</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, rfask_task.o(.text.RFASKTask_SitesCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = RFASKTask_SitesCurrent &rArr; ADCTask_RFASKTask_GetADC &rArr; ADCLib_HandleChannelVal &rArr; ADC_HandleChannelVal &rArr; CalcAvgFun1 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCTask_RFASKTask_GetADC
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentScan
</UL>

<P><STRONG><a name="[21a]"></a>RFASKTask_Task</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, rfask_task.o(.text.RFASKTask_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = RFASKTask_Task &rArr; RFASKTask_HandlerTask &rArr; RFASKTask_FreqCurrentPointTwoTask &rArr; RFASKTask_FreqCurrentScan &rArr; RFASKTask_SitesCurrent &rArr; ADCTask_RFASKTask_GetADC &rArr; ADCLib_HandleChannelVal &rArr; ADC_HandleChannelVal &rArr; CalcAvgFun1 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Printf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_TimeOVFTask
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_RealTime_AddByteCRC
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_ReadInit
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_GetReadState
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_DeviceID
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_CRCTask_Read
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_HandlerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[214]"></a>RFASKTask_WM8510Task</STRONG> (Thumb, 1164 bytes, Stack size 192 bytes, rfask_task.o(.text.RFASKTask_WM8510Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = RFASKTask_WM8510Task &rArr; WM8510Task_I2C_SetFreqHzWithAllFreqReg &rArr; WM8510Lib_I2C_SetFreqHzWithAllFreqReg &rArr; WM8510_I2C_SetFreqHzWithAllFreqReg &rArr; WM8510_I2C_SendCMD &rArr; WM8510_SWI2C_WriteReg &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510Task_I2C_SetFreqHzWithAllFreqReg
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510Task_I2C_Reset
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_RealTime_AddByteSize
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_RealTime_AddByte
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTask_GetFreqKHz
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTask_CalcFreq_Task
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_HandlerTask
</UL>

<P><STRONG><a name="[215]"></a>RFASKTask_YSELTask</STRONG> (Thumb, 2398 bytes, Stack size 432 bytes, rfask_task.o(.text.RFASKTask_YSELTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = RFASKTask_YSELTask &rArr; WM8510Task_I2C_SetFreqHzWithAllFreqReg &rArr; WM8510Lib_I2C_SetFreqHzWithAllFreqReg &rArr; WM8510_I2C_SetFreqHzWithAllFreqReg &rArr; WM8510_I2C_SendCMD &rArr; WM8510_SWI2C_WriteReg &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510Task_I2C_SetFreqHzWithAllFreqReg
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_RealTime_AddByteSize
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_RealTime_AddByte
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_CalcXTAL
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_HandlerTask
</UL>

<P><STRONG><a name="[1fa]"></a>RFASK_ActivateSites</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rfask_cfg.o(.text.RFASK_ActivateSites))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RFASK_ActivateSites
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKLib_ActivateSites
</UL>

<P><STRONG><a name="[1fc]"></a>RFASK_CalcXTAL</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, rfask_cfg.o(.text.RFASK_CalcXTAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RFASK_CalcXTAL &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentScan
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKLib_CalcXTAL
</UL>

<P><STRONG><a name="[224]"></a>RFASK_ClkInit</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, rfask_cfg.o(.text.RFASK_ClkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = RFASK_ClkInit &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTask_Clock
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_Init
</UL>

<P><STRONG><a name="[226]"></a>RFASK_GetYSELA</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, rfask_cfg.o(.text.RFASK_GetYSELA))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RFASK_GetYSELA &rArr; LL_GPIO_IsInputPinSet
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_ScanYSEL
</UL>

<P><STRONG><a name="[228]"></a>RFASK_GetYSELB</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, rfask_cfg.o(.text.RFASK_GetYSELB))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RFASK_GetYSELB &rArr; LL_GPIO_IsInputPinSet
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_ScanYSEL
</UL>

<P><STRONG><a name="[229]"></a>RFASK_GetYSELC</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, rfask_cfg.o(.text.RFASK_GetYSELC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RFASK_GetYSELC &rArr; LL_GPIO_IsInputPinSet
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_ScanYSEL
</UL>

<P><STRONG><a name="[22a]"></a>RFASK_GetYSELD</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, rfask_cfg.o(.text.RFASK_GetYSELD))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RFASK_GetYSELD &rArr; LL_GPIO_IsInputPinSet
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_ScanYSEL
</UL>

<P><STRONG><a name="[1fe]"></a>RFASK_Init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rfask_cfg.o(.text.RFASK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = RFASK_Init &rArr; RFASK_YSELInit &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_YSELInit
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_StructInit
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_ClkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKLib_Init
</UL>

<P><STRONG><a name="[200]"></a>RFASK_ScanYSEL</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, rfask_cfg.o(.text.RFASK_ScanYSEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RFASK_ScanYSEL &rArr; RFASK_GetYSELD &rArr; LL_GPIO_IsInputPinSet
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_GetYSELD
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_GetYSELC
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_GetYSELB
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_GetYSELA
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKLib_ScanYSEL
</UL>

<P><STRONG><a name="[202]"></a>RFASK_SetFreqCurrentPointCmd</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rfask_cfg.o(.text.RFASK_SetFreqCurrentPointCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RFASK_SetFreqCurrentPointCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKLib_SetFreqCurrentPointCmd
</UL>

<P><STRONG><a name="[22b]"></a>RFASK_StructInit</STRONG> (Thumb, 420 bytes, Stack size 8 bytes, rfask_cfg.o(.text.RFASK_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RFASK_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_Init
</UL>

<P><STRONG><a name="[22c]"></a>RFASK_YSELInit</STRONG> (Thumb, 630 bytes, Stack size 144 bytes, rfask_cfg.o(.text.RFASK_YSELInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = RFASK_YSELInit &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTask_Clock
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_Init
</UL>

<P><STRONG><a name="[22d]"></a>RandomLib_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, random_lib.o(.text.RandomLib_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RandomLib_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomTask_Init
</UL>

<P><STRONG><a name="[22f]"></a>RandomTask_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, random_task.o(.text.RandomTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RandomTask_Init &rArr; RandomLib_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomLib_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[22e]"></a>Random_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, random_cfg.o(.text.Random_Init))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomLib_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[230]"></a>SysRTCLib_SoftBuildHandle</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rtc_lib.o(.text.SysRTCLib_SoftBuildHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SysRTCLib_SoftBuildHandle &rArr; SysRTC_SoftBuildHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysRTC_SoftBuildHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysRTCTask_SoftBuildHandle
</UL>

<P><STRONG><a name="[232]"></a>SysRTCLib_SoftBuildInit</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtc_lib.o(.text.SysRTCLib_SoftBuildInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SysRTCLib_SoftBuildInit &rArr; SysRTC_SoftBuildInit &rArr; SysRTC_CalcWeekDay
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysRTC_SoftBuildInit
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysRTCTask_SoftBuildInit
</UL>

<P><STRONG><a name="[234]"></a>SysRTCTask_SoftBuildHandle</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rtc_task.o(.text.SysRTCTask_SoftBuildHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SysRTCTask_SoftBuildHandle &rArr; SysRTCLib_SoftBuildHandle &rArr; SysRTC_SoftBuildHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysRTCLib_SoftBuildHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[235]"></a>SysRTCTask_SoftBuildInit</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtc_task.o(.text.SysRTCTask_SoftBuildInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SysRTCTask_SoftBuildInit &rArr; SysRTCLib_SoftBuildInit &rArr; SysRTC_SoftBuildInit &rArr; SysRTC_CalcWeekDay
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysRTCLib_SoftBuildInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[236]"></a>SysRTC_CalcWeekDay</STRONG> (Thumb, 296 bytes, Stack size 52 bytes, rtc_cfg.o(.text.SysRTC_CalcWeekDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SysRTC_CalcWeekDay
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysRTC_SoftBuildInit
</UL>

<P><STRONG><a name="[231]"></a>SysRTC_SoftBuildHandle</STRONG> (Thumb, 488 bytes, Stack size 36 bytes, rtc_cfg.o(.text.SysRTC_SoftBuildHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SysRTC_SoftBuildHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysRTCLib_SoftBuildHandle
</UL>

<P><STRONG><a name="[233]"></a>SysRTC_SoftBuildInit</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, rtc_cfg.o(.text.SysRTC_SoftBuildInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SysRTC_SoftBuildInit &rArr; SysRTC_CalcWeekDay
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysRTC_CalcWeekDay
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysRTCLib_SoftBuildInit
</UL>

<P><STRONG><a name="[237]"></a>SysTickLib_1msIncTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, systick_lib.o(.text.SysTickLib_1msIncTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysTickLib_1msIncTick &rArr; SysTick_1msIncTick
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_1msIncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickTask_1msIncTick
</UL>

<P><STRONG><a name="[239]"></a>SysTickLib_DecTick</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, systick_lib.o(.text.SysTickLib_DecTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SysTickLib_DecTick &rArr; SysTick_DecTick &rArr; IWDGTask_Reset &rArr; IWDGLib_Reset &rArr; IWDG_Reset &rArr; LL_IWDG_ReloadCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DecTick
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickTask_DecTick
</UL>

<P><STRONG><a name="[23b]"></a>SysTickLib_FuncTick</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, systick_lib.o(.text.SysTickLib_FuncTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTickLib_FuncTick &rArr; SysTick_FuncTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_FuncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickTask_FuncTick
</UL>

<P><STRONG><a name="[23d]"></a>SysTickLib_GetTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, systick_lib.o(.text.SysTickLib_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTickLib_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickTask_GetTick
</UL>

<P><STRONG><a name="[23f]"></a>SysTickLib_IRQTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, systick_lib.o(.text.SysTickLib_IRQTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTickLib_IRQTick &rArr; SysTick_IRQTick
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IRQTick
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickTask_IRQTick
</UL>

<P><STRONG><a name="[241]"></a>SysTickLib_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, systick_lib.o(.text.SysTickLib_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SysTickLib_Init &rArr; SysTick_Init &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickTask_Init
</UL>

<P><STRONG><a name="[243]"></a>SysTickLib_WaitusTick</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, systick_lib.o(.text.SysTickLib_WaitusTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTickLib_WaitusTick &rArr; SysTick_WaitusTick
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_WaitusTick
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickTask_WaitusTick
</UL>

<P><STRONG><a name="[146]"></a>SysTickTask_1msIncTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, systick_task.o(.text.SysTickTask_1msIncTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SysTickTask_1msIncTick &rArr; SysTickLib_1msIncTick &rArr; SysTick_1msIncTick
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickLib_1msIncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[147]"></a>SysTickTask_DecTick</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, systick_task.o(.text.SysTickTask_DecTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SysTickTask_DecTick &rArr; SysTickLib_DecTick &rArr; SysTick_DecTick &rArr; IWDGTask_Reset &rArr; IWDGLib_Reset &rArr; IWDG_Reset &rArr; LL_IWDG_ReloadCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickLib_DecTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[1aa]"></a>SysTickTask_FuncTick</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, systick_task.o(.text.SysTickTask_FuncTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTickTask_FuncTick &rArr; SysTickLib_FuncTick &rArr; SysTick_FuncTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickLib_FuncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDWork_Init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreq_Task
</UL>

<P><STRONG><a name="[4c]"></a>SysTickTask_GetTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, systick_task.o(.text.SysTickTask_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTickTask_GetTick &rArr; SysTickLib_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickLib_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.Sys_Init)
</UL>
<P><STRONG><a name="[245]"></a>SysTickTask_IRQTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, systick_task.o(.text.SysTickTask_IRQTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTickTask_IRQTick &rArr; SysTickLib_IRQTick &rArr; SysTick_IRQTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickLib_IRQTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[246]"></a>SysTickTask_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, systick_task.o(.text.SysTickTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SysTickTask_Init &rArr; SysTickLib_Init &rArr; SysTick_Init &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickLib_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[144]"></a>SysTickTask_WaitusTick</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, systick_task.o(.text.SysTickTask_WaitusTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTickTask_WaitusTick &rArr; SysTickLib_WaitusTick &rArr; SysTick_WaitusTick
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickLib_WaitusTick
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_us
</UL>

<P><STRONG><a name="[238]"></a>SysTick_1msIncTick</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, systick_cfg.o(.text.SysTick_1msIncTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysTick_1msIncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickLib_1msIncTick
</UL>

<P><STRONG><a name="[23a]"></a>SysTick_DecTick</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, systick_cfg.o(.text.SysTick_DecTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_DecTick &rArr; IWDGTask_Reset &rArr; IWDGLib_Reset &rArr; IWDG_Reset &rArr; LL_IWDG_ReloadCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGTask_Reset
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_WaitusTick
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickLib_DecTick
</UL>

<P><STRONG><a name="[23c]"></a>SysTick_FuncTick</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, systick_cfg.o(.text.SysTick_FuncTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_FuncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickLib_FuncTick
</UL>

<P><STRONG><a name="[23e]"></a>SysTick_GetTick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick_cfg.o(.text.SysTick_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickLib_GetTick
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f1xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; SysTickTask_IRQTick &rArr; SysTickLib_IRQTick &rArr; SysTick_IRQTick
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickTask_IRQTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[240]"></a>SysTick_IRQTick</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, systick_cfg.o(.text.SysTick_IRQTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_IRQTick
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickLib_IRQTick
</UL>

<P><STRONG><a name="[242]"></a>SysTick_Init</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, systick_cfg.o(.text.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SysTick_Init &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Suspend
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_StructInit
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Resume
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriorityGrouping
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickLib_Init
</UL>

<P><STRONG><a name="[24e]"></a>SysTick_Resume</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, systick_cfg.o(.text.SysTick_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[247]"></a>SysTick_StructInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, systick_cfg.o(.text.SysTick_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[248]"></a>SysTick_Suspend</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, systick_cfg.o(.text.SysTick_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[244]"></a>SysTick_WaitusTick</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, systick_cfg.o(.text.SysTick_WaitusTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_WaitusTick
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickLib_WaitusTick
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DecTick
</UL>

<P><STRONG><a name="[24f]"></a>Sys_Init</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, main.o(.text.Sys_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = Sys_Init &rArr; USARTTask_Init &rArr; USARTLib_Init &rArr; USART_Init &rArr; USART1_Init &rArr; USART_Printf &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCTask_ADC_Init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510Task_I2C_Init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_Init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTask_Init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickTask_Init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysRTCTask_SoftBuildInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomTask_Init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_Init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerTask_Init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTask_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGTask_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTask_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTask_LockRead
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMTask_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTask_ms
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_QueryInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCTask_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXXTask_I2C_WritePageByte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXXTask_I2C_ReadPageByte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXXTask_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[250]"></a>SystemClock_Config</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemClock_Config &rArr; LL_RCC_PLL_ConfigDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_EnableInstCache
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_EnableDataCache
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSTICK_SetClkSource
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetSysClkSource
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAPB2Prescaler
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAPB1Prescaler
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAHBPrescaler
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_IsReady
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_Enable
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_ConfigDomain_SYS
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI_IsReady
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI_Enable
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_IsReady
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_Enable
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_SetLatency
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_GetLatency
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_EnablePrefetch
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, system_stm32f1xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TIM2_IRQHandler &rArr; DecodeTask_IRQTask &rArr; DecodeLib_IRQTask &rArr; Decode_IRQTask &rArr; Decode_CaptureHandler &rArr; LL_TIM_IC_SetPolarity
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_IRQTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[267]"></a>TimerLib_CalcFreq_Task</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer_lib.o(.text.TimerLib_CalcFreq_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TimerLib_CalcFreq_Task &rArr; Timer_CalcFreq_Task &rArr; SysTickTask_FuncTick &rArr; SysTickLib_FuncTick &rArr; SysTick_FuncTick
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreq_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTask_CalcFreq_Task
</UL>

<P><STRONG><a name="[269]"></a>TimerLib_Clock</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, timer_lib.o(.text.TimerLib_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TimerLib_Clock &rArr; Timer_Clock &rArr; LL_APB2_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTask_Clock
</UL>

<P><STRONG><a name="[26b]"></a>TimerLib_GetFreqKHz</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer_lib.o(.text.TimerLib_GetFreqKHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerLib_GetFreqKHz
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetFreqKHz
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTask_GetFreqKHz
</UL>

<P><STRONG><a name="[26d]"></a>TimerLib_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer_lib.o(.text.TimerLib_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TimerLib_Init &rArr; Timer_Init &rArr; Timer_CalcFreqMode_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTask_Init
</UL>

<P><STRONG><a name="[222]"></a>TimerTask_CalcFreq_Task</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer_task.o(.text.TimerTask_CalcFreq_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TimerTask_CalcFreq_Task &rArr; TimerLib_CalcFreq_Task &rArr; Timer_CalcFreq_Task &rArr; SysTickTask_FuncTick &rArr; SysTickLib_FuncTick &rArr; SysTick_FuncTick
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLib_CalcFreq_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_WM8510Task
</UL>

<P><STRONG><a name="[114]"></a>TimerTask_Clock</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, timer_task.o(.text.TimerTask_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TimerTask_Clock &rArr; TimerLib_Clock &rArr; Timer_Clock &rArr; LL_APB2_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLib_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
</UL>

<P><STRONG><a name="[223]"></a>TimerTask_GetFreqKHz</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer_task.o(.text.TimerTask_GetFreqKHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerTask_GetFreqKHz &rArr; TimerLib_GetFreqKHz
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLib_GetFreqKHz
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_WM8510Task
</UL>

<P><STRONG><a name="[251]"></a>TimerTask_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer_task.o(.text.TimerTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TimerTask_Init &rArr; TimerLib_Init &rArr; Timer_Init &rArr; Timer_CalcFreqMode_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLib_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[26f]"></a>Timer_CalcFreqMode_Init</STRONG> (Thumb, 218 bytes, Stack size 80 bytes, timer_cfg.o(.text.Timer_CalcFreqMode_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Timer_CalcFreqMode_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Clock
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Clock
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetTriggerOutput
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetTriggerInput
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetClockSource
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_SetPolarity
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_SetFilter
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_SetActiveInput
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableARRPreload
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableMasterSlaveMode
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableIT_TRIG
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableDMAReq_TRIG
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_CC_DisableChannel
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_AF_RemapPartial_TIM3
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[4d]"></a>Timer_CalcFreq_Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, timer_cfg.o(.text.Timer_CalcFreq_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timer_CalcFreq_Init &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounter
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GetCounter
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_cfg.o(.text.Timer_CalcFreq_Task)
</UL>
<P><STRONG><a name="[268]"></a>Timer_CalcFreq_Task</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, timer_cfg.o(.text.Timer_CalcFreq_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Timer_CalcFreq_Task &rArr; SysTickTask_FuncTick &rArr; SysTickLib_FuncTick &rArr; SysTick_FuncTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickTask_FuncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLib_CalcFreq_Task
</UL>

<P><STRONG><a name="[26a]"></a>Timer_Clock</STRONG> (Thumb, 652 bytes, Stack size 24 bytes, timer_cfg.o(.text.Timer_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Timer_Clock &rArr; LL_APB2_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_DisableClock
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLib_Clock
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreqMode_Init
</UL>

<P><STRONG><a name="[26c]"></a>Timer_GetFreqKHz</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer_cfg.o(.text.Timer_GetFreqKHz))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLib_GetFreqKHz
</UL>

<P><STRONG><a name="[26e]"></a>Timer_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer_cfg.o(.text.Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Timer_Init &rArr; Timer_CalcFreqMode_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreqMode_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLib_Init
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, stm32f1xx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USART1_IRQHandler &rArr; USARTTask_ITWrite_TXETask &rArr; USARTLib_ITWrite_TXETask &rArr; USART_ITWrite_TXETask &rArr; USART_WriteInit &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_ITWrite_TXETask
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_ITWrite_TCTask
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_ITRead_Task
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ReceiveData8
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_TXE
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_TC
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_RXNE
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_TXE
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_TC
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_RXNE
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_TC
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_RXNE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[290]"></a>USART1_Init</STRONG> (Thumb, 368 bytes, Stack size 128 bytes, usart_cfg.o(.text.USART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = USART1_Init &rArr; USART_Printf &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DeInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTask_Clock
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Printf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIOInit
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Clock
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_485GPIOInit
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_RXNE
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Enable
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ConfigAsyncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[2c6]"></a>USART2_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart_cfg.o(.text.USART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[2c7]"></a>USART3_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart_cfg.o(.text.USART3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART3_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[29b]"></a>USARTLib_CRCTask_Read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart_lib.o(.text.USARTLib_CRCTask_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USARTLib_CRCTask_Read &rArr; USART_CRCTask_Read &rArr; CRCTask_CRC32 &rArr; CRCLib_CRC32 &rArr; CRC_CRC32_CRC &rArr; CRC_CRC32_HWCRC &rArr; CRC_CRC32_HWReSet &rArr; LL_CRC_ResetCRCCalculationUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_CRCTask_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_CRCTask_Read
</UL>

<P><STRONG><a name="[29d]"></a>USARTLib_DeviceID</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart_lib.o(.text.USARTLib_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USARTLib_DeviceID &rArr; USART_DeviceID
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_DeviceID
</UL>

<P><STRONG><a name="[29f]"></a>USARTLib_DeviceInit</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, usart_lib.o(.text.USARTLib_DeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USARTLib_DeviceInit &rArr; USART_DeviceInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeviceInit
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_Init
</UL>

<P><STRONG><a name="[2a1]"></a>USARTLib_GetReadState</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart_lib.o(.text.USARTLib_GetReadState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USARTLib_GetReadState &rArr; USART_GetReadState
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetReadState
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_GetReadState
</UL>

<P><STRONG><a name="[2a3]"></a>USARTLib_ITRead_Task</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usart_lib.o(.text.USARTLib_ITRead_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USARTLib_ITRead_Task &rArr; USART_ITRead_Task &rArr; USART_ITRead_16BitsTask &rArr; USART_TimeTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITRead_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_ITRead_Task
</UL>

<P><STRONG><a name="[2a5]"></a>USARTLib_ITWrite_TCTask</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart_lib.o(.text.USARTLib_ITWrite_TCTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USARTLib_ITWrite_TCTask &rArr; USART_ITWrite_TCTask &rArr; USART_WriteInit &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITWrite_TCTask
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_ITWrite_TCTask
</UL>

<P><STRONG><a name="[2a7]"></a>USARTLib_ITWrite_TXETask</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart_lib.o(.text.USARTLib_ITWrite_TXETask))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USARTLib_ITWrite_TXETask &rArr; USART_ITWrite_TXETask &rArr; USART_WriteInit &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITWrite_TXETask
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_ITWrite_TXETask
</UL>

<P><STRONG><a name="[2a9]"></a>USARTLib_Init</STRONG> (Thumb, 170 bytes, Stack size 104 bytes, usart_lib.o(.text.USARTLib_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = USARTLib_Init &rArr; USART_Init &rArr; USART1_Init &rArr; USART_Printf &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCTask_Enable
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_Init
</UL>

<P><STRONG><a name="[2ab]"></a>USARTLib_ReadInit</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart_lib.o(.text.USARTLib_ReadInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USARTLib_ReadInit &rArr; USART_ReadInit &rArr; USART_485GPIOInit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadInit
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_ReadInit
</UL>

<P><STRONG><a name="[2ad]"></a>USARTLib_RealTime_AddByte</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usart_lib.o(.text.USARTLib_RealTime_AddByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USARTLib_RealTime_AddByte &rArr; USART_RealTime_AddByte &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RealTime_AddByte
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_RealTime_AddByte
</UL>

<P><STRONG><a name="[2af]"></a>USARTLib_RealTime_AddByteCRC</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart_lib.o(.text.USARTLib_RealTime_AddByteCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USARTLib_RealTime_AddByteCRC &rArr; USART_RealTime_AddByteCRC &rArr; CRCTask_CRC32 &rArr; CRCLib_CRC32 &rArr; CRC_CRC32_CRC &rArr; CRC_CRC32_HWCRC &rArr; CRC_CRC32_HWReSet &rArr; LL_CRC_ResetCRCCalculationUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RealTime_AddByteCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_RealTime_AddByteCRC
</UL>

<P><STRONG><a name="[2b1]"></a>USARTLib_RealTime_AddByteSize</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usart_lib.o(.text.USARTLib_RealTime_AddByteSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = USARTLib_RealTime_AddByteSize &rArr; USART_RealTime_AddByteSize &rArr; USART_RealTime_AddByte &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RealTime_AddByteSize
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_RealTime_AddByteSize
</UL>

<P><STRONG><a name="[2b3]"></a>USARTLib_TimeOVFTask</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usart_lib.o(.text.USARTLib_TimeOVFTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = USARTLib_TimeOVFTask &rArr; USART_TimeOVFTask &rArr; USART_Printf &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TimeOVFTask
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTask_TimeOVFTask
</UL>

<P><STRONG><a name="[21c]"></a>USARTTask_CRCTask_Read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart_task.o(.text.USARTTask_CRCTask_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USARTTask_CRCTask_Read &rArr; USARTLib_CRCTask_Read &rArr; USART_CRCTask_Read &rArr; CRCTask_CRC32 &rArr; CRCLib_CRC32 &rArr; CRC_CRC32_CRC &rArr; CRC_CRC32_HWCRC &rArr; CRC_CRC32_HWReSet &rArr; LL_CRC_ResetCRCCalculationUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_CRCTask_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_Task
</UL>

<P><STRONG><a name="[21d]"></a>USARTTask_DeviceID</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart_task.o(.text.USARTTask_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USARTTask_DeviceID &rArr; USARTLib_DeviceID &rArr; USART_DeviceID
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_DeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_Task
</UL>

<P><STRONG><a name="[21b]"></a>USARTTask_GetReadState</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart_task.o(.text.USARTTask_GetReadState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USARTTask_GetReadState &rArr; USARTLib_GetReadState &rArr; USART_GetReadState
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_GetReadState
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_Task
</UL>

<P><STRONG><a name="[287]"></a>USARTTask_ITRead_Task</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usart_task.o(.text.USARTTask_ITRead_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USARTTask_ITRead_Task &rArr; USARTLib_ITRead_Task &rArr; USART_ITRead_Task &rArr; USART_ITRead_16BitsTask &rArr; USART_TimeTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_ITRead_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[28e]"></a>USARTTask_ITWrite_TCTask</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart_task.o(.text.USARTTask_ITWrite_TCTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USARTTask_ITWrite_TCTask &rArr; USARTLib_ITWrite_TCTask &rArr; USART_ITWrite_TCTask &rArr; USART_WriteInit &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_ITWrite_TCTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[28b]"></a>USARTTask_ITWrite_TXETask</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart_task.o(.text.USARTTask_ITWrite_TXETask))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = USARTTask_ITWrite_TXETask &rArr; USARTLib_ITWrite_TXETask &rArr; USART_ITWrite_TXETask &rArr; USART_WriteInit &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_ITWrite_TXETask
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[253]"></a>USARTTask_Init</STRONG> (Thumb, 180 bytes, Stack size 120 bytes, usart_task.o(.text.USARTTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = USARTTask_Init &rArr; USARTLib_Init &rArr; USART_Init &rArr; USART1_Init &rArr; USART_Printf &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_Init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_DeviceInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[220]"></a>USARTTask_ReadInit</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart_task.o(.text.USARTTask_ReadInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USARTTask_ReadInit &rArr; USARTLib_ReadInit &rArr; USART_ReadInit &rArr; USART_485GPIOInit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_ReadInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_Task
</UL>

<P><STRONG><a name="[209]"></a>USARTTask_RealTime_AddByte</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usart_task.o(.text.USARTTask_RealTime_AddByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USARTTask_RealTime_AddByte &rArr; USARTLib_RealTime_AddByte &rArr; USART_RealTime_AddByte &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_RealTime_AddByte
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_YSELTask
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_WM8510Task
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentScan
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentPointTwoTask
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentPointOneTask
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentHandlerTask
</UL>

<P><STRONG><a name="[21e]"></a>USARTTask_RealTime_AddByteCRC</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart_task.o(.text.USARTTask_RealTime_AddByteCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = USARTTask_RealTime_AddByteCRC &rArr; USARTLib_RealTime_AddByteCRC &rArr; USART_RealTime_AddByteCRC &rArr; CRCTask_CRC32 &rArr; CRCLib_CRC32 &rArr; CRC_CRC32_CRC &rArr; CRC_CRC32_HWCRC &rArr; CRC_CRC32_HWReSet &rArr; LL_CRC_ResetCRCCalculationUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_RealTime_AddByteCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_Task
</UL>

<P><STRONG><a name="[20a]"></a>USARTTask_RealTime_AddByteSize</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usart_task.o(.text.USARTTask_RealTime_AddByteSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USARTTask_RealTime_AddByteSize &rArr; USARTLib_RealTime_AddByteSize &rArr; USART_RealTime_AddByteSize &rArr; USART_RealTime_AddByte &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_RealTime_AddByteSize
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_YSELTask
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_WM8510Task
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentScan
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentPointTwoTask
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentPointOneTask
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentHandlerTask
</UL>

<P><STRONG><a name="[221]"></a>USARTTask_TimeOVFTask</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usart_task.o(.text.USARTTask_TimeOVFTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = USARTTask_TimeOVFTask &rArr; USARTLib_TimeOVFTask &rArr; USART_TimeOVFTask &rArr; USART_Printf &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_TimeOVFTask
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_Task
</UL>

<P><STRONG><a name="[299]"></a>USART_485GPIOInit</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usart_cfg.o(.text.USART_485GPIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_485GPIOInit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Printf
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteInit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RealTime_AddByte
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadInit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[29c]"></a>USART_CRCTask_Read</STRONG> (Thumb, 782 bytes, Stack size 32 bytes, usart_cfg.o(.text.USART_CRCTask_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USART_CRCTask_Read &rArr; CRCTask_CRC32 &rArr; CRCLib_CRC32 &rArr; CRC_CRC32_CRC &rArr; CRC_CRC32_HWCRC &rArr; CRC_CRC32_HWReSet &rArr; LL_CRC_ResetCRCCalculationUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCTask_Enable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCTask_CheckSum
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCTask_CRC8
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCTask_CRC32
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCTask_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_CRCTask_Read
</UL>

<P><STRONG><a name="[2be]"></a>USART_ClearOVF</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usart_cfg.o(.text.USART_ClearOVF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_ClearOVF
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITRead_8BitsTask
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITRead_16BitsTask
</UL>

<P><STRONG><a name="[291]"></a>USART_Clock</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, usart_cfg.o(.text.USART_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Clock &rArr; LL_APB2_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_DisableClock
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[29e]"></a>USART_DeviceID</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, usart_cfg.o(.text.USART_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_DeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_DeviceID
</UL>

<P><STRONG><a name="[2a0]"></a>USART_DeviceInit</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, usart_cfg.o(.text.USART_DeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_DeviceInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_DeviceInit
</UL>

<P><STRONG><a name="[29a]"></a>USART_GPIOInit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, usart_cfg.o(.text.USART_GPIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Printf
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteInit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RealTime_AddByte
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[2a2]"></a>USART_GetReadState</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart_cfg.o(.text.USART_GetReadState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetReadState
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_GetReadState
</UL>

<P><STRONG><a name="[2bc]"></a>USART_ITRead_16BitsTask</STRONG> (Thumb, 468 bytes, Stack size 56 bytes, usart_cfg.o(.text.USART_ITRead_16BitsTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART_ITRead_16BitsTask &rArr; USART_TimeTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TimeTick_Init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearOVF
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITRead_Task
</UL>

<P><STRONG><a name="[2bf]"></a>USART_ITRead_8BitsTask</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, usart_cfg.o(.text.USART_ITRead_8BitsTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART_ITRead_8BitsTask &rArr; USART_TimeTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TimeTick_Init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearOVF
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITRead_Task
</UL>

<P><STRONG><a name="[2a4]"></a>USART_ITRead_Task</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, usart_cfg.o(.text.USART_ITRead_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USART_ITRead_Task &rArr; USART_ITRead_16BitsTask &rArr; USART_TimeTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITRead_8BitsTask
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITRead_16BitsTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_ITRead_Task
</UL>

<P><STRONG><a name="[2a6]"></a>USART_ITWrite_TCTask</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, usart_cfg.o(.text.USART_ITWrite_TCTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USART_ITWrite_TCTask &rArr; USART_WriteInit &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteInit
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_TransmitData8
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableIT_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_ITWrite_TCTask
</UL>

<P><STRONG><a name="[2a8]"></a>USART_ITWrite_TXETask</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, usart_cfg.o(.text.USART_ITWrite_TXETask))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USART_ITWrite_TXETask &rArr; USART_WriteInit &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteInit
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TimeTick_Init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_TransmitData8
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_TC
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableIT_TXE
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_ITWrite_TXETask
</UL>

<P><STRONG><a name="[2aa]"></a>USART_Init</STRONG> (Thumb, 244 bytes, Stack size 96 bytes, usart_cfg.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = USART_Init &rArr; USART1_Init &rArr; USART_Printf &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_Init
</UL>

<P><STRONG><a name="[2c8]"></a>USART_PollMode_WriteByte</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, usart_cfg.o(.text.USART_PollMode_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART_PollMode_WriteByte &rArr; IWDGTask_Reset &rArr; IWDGLib_Reset &rArr; IWDG_Reset &rArr; LL_IWDG_ReloadCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGTask_Reset
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_TransmitData8
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_TC
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Printf
</UL>

<P><STRONG><a name="[21f]"></a>USART_Printf</STRONG> (Thumb, 306 bytes, Stack size 88 bytes, usart_cfg.o(.text.USART_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USART_Printf &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGTask_Reset
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PollMode_WriteByte
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIOInit
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_485GPIOInit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_TXE
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_TC
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_TXE
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_TC
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_TC
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_Task
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TimeOVFTask
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[2ac]"></a>USART_ReadInit</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usart_cfg.o(.text.USART_ReadInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART_ReadInit &rArr; USART_485GPIOInit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_485GPIOInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TimeOVFTask
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_ReadInit
</UL>

<P><STRONG><a name="[2ae]"></a>USART_RealTime_AddByte</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, usart_cfg.o(.text.USART_RealTime_AddByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USART_RealTime_AddByte &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIOInit
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_485GPIOInit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_TXE
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_TXE
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RealTime_AddByteSize
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RealTime_AddByteCRC
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_RealTime_AddByte
</UL>

<P><STRONG><a name="[2b0]"></a>USART_RealTime_AddByteCRC</STRONG> (Thumb, 294 bytes, Stack size 72 bytes, usart_cfg.o(.text.USART_RealTime_AddByteCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USART_RealTime_AddByteCRC &rArr; CRCTask_CRC32 &rArr; CRCLib_CRC32 &rArr; CRC_CRC32_CRC &rArr; CRC_CRC32_HWCRC &rArr; CRC_CRC32_HWReSet &rArr; LL_CRC_ResetCRCCalculationUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCTask_Enable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCTask_CheckSum
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCTask_CRC8
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCTask_CRC32
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCTask_CRC16
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RealTime_AddByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_RealTime_AddByteCRC
</UL>

<P><STRONG><a name="[2b2]"></a>USART_RealTime_AddByteSize</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, usart_cfg.o(.text.USART_RealTime_AddByteSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USART_RealTime_AddByteSize &rArr; USART_RealTime_AddByte &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RealTime_AddByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_RealTime_AddByteSize
</UL>

<P><STRONG><a name="[2c5]"></a>USART_StructInit</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, usart_cfg.o(.text.USART_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[2b4]"></a>USART_TimeOVFTask</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, usart_cfg.o(.text.USART_TimeOVFTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USART_TimeOVFTask &rArr; USART_Printf &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Printf
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteInit
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TimeTick_OVF
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTLib_TimeOVFTask
</UL>

<P><STRONG><a name="[2bd]"></a>USART_TimeTick_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, usart_cfg.o(.text.USART_TimeTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_TimeTick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITWrite_TXETask
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITRead_8BitsTask
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITRead_16BitsTask
</UL>

<P><STRONG><a name="[2d0]"></a>USART_TimeTick_OVF</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, usart_cfg.o(.text.USART_TimeTick_OVF))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_TimeTick_OVF
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TimeOVFTask
</UL>

<P><STRONG><a name="[2c2]"></a>USART_WriteInit</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, usart_cfg.o(.text.USART_WriteInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USART_WriteInit &rArr; USART_GPIOInit &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIOInit
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_485GPIOInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TimeOVFTask
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITWrite_TXETask
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITWrite_TCTask
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2d1]"></a>WM8510Lib_I2C_Init</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, wm8510_lib.o(.text.WM8510Lib_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = WM8510Lib_I2C_Init &rArr; WM8510_I2C_Init &rArr; WM8510_I2C_START &rArr; WM8510_I2C_SendCMD &rArr; WM8510_SWI2C_WriteReg &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510Task_I2C_Init
</UL>

<P><STRONG><a name="[2d3]"></a>WM8510Lib_I2C_Reset</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wm8510_lib.o(.text.WM8510Lib_I2C_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = WM8510Lib_I2C_Reset &rArr; WM8510_I2C_Reset &rArr; WM8510_I2C_START &rArr; WM8510_I2C_SendCMD &rArr; WM8510_SWI2C_WriteReg &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510Task_I2C_Reset
</UL>

<P><STRONG><a name="[2d5]"></a>WM8510Lib_I2C_SetFreqHzWithAllFreqReg</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wm8510_lib.o(.text.WM8510Lib_I2C_SetFreqHzWithAllFreqReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = WM8510Lib_I2C_SetFreqHzWithAllFreqReg &rArr; WM8510_I2C_SetFreqHzWithAllFreqReg &rArr; WM8510_I2C_SendCMD &rArr; WM8510_SWI2C_WriteReg &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_SetFreqHzWithAllFreqReg
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510Task_I2C_SetFreqHzWithAllFreqReg
</UL>

<P><STRONG><a name="[252]"></a>WM8510Task_I2C_Init</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, wm8510_task.o(.text.WM8510Task_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = WM8510Task_I2C_Init &rArr; WM8510Lib_I2C_Init &rArr; WM8510_I2C_Init &rArr; WM8510_I2C_START &rArr; WM8510_I2C_SendCMD &rArr; WM8510_SWI2C_WriteReg &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510Lib_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[212]"></a>WM8510Task_I2C_Reset</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wm8510_task.o(.text.WM8510Task_I2C_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = WM8510Task_I2C_Reset &rArr; WM8510Lib_I2C_Reset &rArr; WM8510_I2C_Reset &rArr; WM8510_I2C_START &rArr; WM8510_I2C_SendCMD &rArr; WM8510_SWI2C_WriteReg &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510Lib_I2C_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_KeyTask
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_WM8510Task
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentScan
</UL>

<P><STRONG><a name="[210]"></a>WM8510Task_I2C_SetFreqHzWithAllFreqReg</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wm8510_task.o(.text.WM8510Task_I2C_SetFreqHzWithAllFreqReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = WM8510Task_I2C_SetFreqHzWithAllFreqReg &rArr; WM8510Lib_I2C_SetFreqHzWithAllFreqReg &rArr; WM8510_I2C_SetFreqHzWithAllFreqReg &rArr; WM8510_I2C_SendCMD &rArr; WM8510_SWI2C_WriteReg &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510Lib_I2C_SetFreqHzWithAllFreqReg
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_YSELTask
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_WM8510Task
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_SetClockFreq
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentScan
</UL>

<P><STRONG><a name="[2d8]"></a>WM8510_Calc_FreqAdd</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wm8510_cfg.o(.text.WM8510_Calc_FreqAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM8510_Calc_FreqAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_Calc_PllRate
</UL>

<P><STRONG><a name="[2d7]"></a>WM8510_Calc_PllRate</STRONG> (Thumb, 1264 bytes, Stack size 56 bytes, wm8510_cfg.o(.text.WM8510_Calc_PllRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = WM8510_Calc_PllRate &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_Calc_FreqAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_SetFreqHzWithAllFreqReg
</UL>

<P><STRONG><a name="[2e1]"></a>WM8510_HWI2C_WriteReg</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, wm8510_cfg.o(.text.WM8510_HWI2C_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM8510_HWI2C_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_SendCMD
</UL>

<P><STRONG><a name="[2dc]"></a>WM8510_I2C_Device0_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, wm8510_cfg.o(.text.WM8510_I2C_Device0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM8510_I2C_Device0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_Init
</UL>

<P><STRONG><a name="[2dd]"></a>WM8510_I2C_Device1_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm8510_cfg.o(.text.WM8510_I2C_Device1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM8510_I2C_Device1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_Init
</UL>

<P><STRONG><a name="[2de]"></a>WM8510_I2C_Device2_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm8510_cfg.o(.text.WM8510_I2C_Device2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM8510_I2C_Device2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_Init
</UL>

<P><STRONG><a name="[2d2]"></a>WM8510_I2C_Init</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, wm8510_cfg.o(.text.WM8510_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = WM8510_I2C_Init &rArr; WM8510_I2C_START &rArr; WM8510_I2C_SendCMD &rArr; WM8510_SWI2C_WriteReg &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_Init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_StructInit
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_START
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_Device2_Init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_Device1_Init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_Device0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510Lib_I2C_Init
</UL>

<P><STRONG><a name="[2d4]"></a>WM8510_I2C_Reset</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wm8510_cfg.o(.text.WM8510_I2C_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = WM8510_I2C_Reset &rArr; WM8510_I2C_START &rArr; WM8510_I2C_SendCMD &rArr; WM8510_SWI2C_WriteReg &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_START
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510Lib_I2C_Reset
</UL>

<P><STRONG><a name="[2df]"></a>WM8510_I2C_START</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, wm8510_cfg.o(.text.WM8510_I2C_START))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = WM8510_I2C_START &rArr; WM8510_I2C_SendCMD &rArr; WM8510_SWI2C_WriteReg &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_SendCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_Reset
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_Init
</UL>

<P><STRONG><a name="[2e0]"></a>WM8510_I2C_SendCMD</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, wm8510_cfg.o(.text.WM8510_I2C_SendCMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = WM8510_I2C_SendCMD &rArr; WM8510_SWI2C_WriteReg &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_SWI2C_WriteReg
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_HWI2C_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_SetFreqHzWithAllFreqReg
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_START
</UL>

<P><STRONG><a name="[2d6]"></a>WM8510_I2C_SetFreqHzWithAllFreqReg</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, wm8510_cfg.o(.text.WM8510_I2C_SetFreqHzWithAllFreqReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = WM8510_I2C_SetFreqHzWithAllFreqReg &rArr; WM8510_I2C_SendCMD &rArr; WM8510_SWI2C_WriteReg &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_SendCMD
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_Calc_PllRate
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510Lib_I2C_SetFreqHzWithAllFreqReg
</UL>

<P><STRONG><a name="[2db]"></a>WM8510_I2C_StructInit</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, wm8510_cfg.o(.text.WM8510_I2C_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM8510_I2C_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_Init
</UL>

<P><STRONG><a name="[2e2]"></a>WM8510_SWI2C_WriteReg</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, wm8510_cfg.o(.text.WM8510_SWI2C_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WM8510_SWI2C_WriteReg &rArr; I2CTask_MSW_START &rArr; I2CLib_MSW_START &rArr; I2C_MSW_SendByte &rArr; I2C_MSW_SendBit &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_SendByte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_STOP
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_START
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CTask_MSW_ReadACK
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8510_I2C_SendCMD
</UL>

<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.WWDG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WWDG_IRQHandler &rArr; LL_WWDG_ClearFlag_EWKUP
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_WWDG_ClearFlag_EWKUP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[256]"></a>_Error_Handler</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32_cfg.o(.text._Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ea]"></a>_irq_disable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32_cfg.o(.text._irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSS_RCC_IRQ
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[184]"></a>_irq_enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32_cfg.o(.text._irq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = main &rArr; RFASKTask_Task &rArr; RFASKTask_HandlerTask &rArr; RFASKTask_FreqCurrentPointTwoTask &rArr; RFASKTask_FreqCurrentScan &rArr; RFASKTask_SitesCurrent &rArr; ADCTask_RFASKTask_GetADC &rArr; ADCLib_HandleChannelVal &rArr; ADC_HandleChannelVal &rArr; CalcAvgFun1 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickTask_GetTick
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysRTCTask_SoftBuildHandle
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_Task
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_KeyTask
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask_ScanSOT
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGTask_Reset
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_ScanRST
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_QueryInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeTask_Query
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2e4]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2fa]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[2fb]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[2fc]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[2ce]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Printf
</UL>

<P><STRONG><a name="[2fd]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2fe]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2ff]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ec]"></a>LL_DMA_IsActiveFlag_TC1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.LL_DMA_IsActiveFlag_TC1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_IsActiveFlag_TC1
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>LL_DMA_IsActiveFlag_TC5</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.LL_DMA_IsActiveFlag_TC5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_IsActiveFlag_TC5
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>LL_DMA_IsEnabledIT_TC</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f1xx_it.o(.text.LL_DMA_IsEnabledIT_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_DMA_IsEnabledIT_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[1eb]"></a>LL_EXTI_ClearFlag_0_31</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.LL_EXTI_ClearFlag_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_EXTI_ClearFlag_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
</UL>

<P><STRONG><a name="[1ec]"></a>LL_PWR_IsActiveFlag_PVDO</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.LL_PWR_IsActiveFlag_PVDO))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
</UL>

<P><STRONG><a name="[288]"></a>LL_USART_ClearFlag_RXNE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.LL_USART_ClearFlag_RXNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_ClearFlag_RXNE
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[28f]"></a>LL_USART_ClearFlag_TC</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.LL_USART_ClearFlag_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_ClearFlag_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[284]"></a>LL_USART_IsActiveFlag_RXNE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.LL_USART_IsActiveFlag_RXNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_IsActiveFlag_RXNE
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[28c]"></a>LL_USART_IsActiveFlag_TC</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.LL_USART_IsActiveFlag_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_IsActiveFlag_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[289]"></a>LL_USART_IsActiveFlag_TXE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.LL_USART_IsActiveFlag_TXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_IsActiveFlag_TXE
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[285]"></a>LL_USART_IsEnabledIT_RXNE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.LL_USART_IsEnabledIT_RXNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_IsEnabledIT_RXNE
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[28d]"></a>LL_USART_IsEnabledIT_TC</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.LL_USART_IsEnabledIT_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_IsEnabledIT_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[28a]"></a>LL_USART_IsEnabledIT_TXE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.LL_USART_IsEnabledIT_TXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_IsEnabledIT_TXE
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[286]"></a>LL_USART_ReceiveData8</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.LL_USART_ReceiveData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_ReceiveData8
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2e3]"></a>LL_WWDG_ClearFlag_EWKUP</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.LL_WWDG_ClearFlag_EWKUP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_WWDG_ClearFlag_EWKUP
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>

<P><STRONG><a name="[1c2]"></a>LL_FLASH_DisablePrefetch</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_cfg.o(.text.LL_FLASH_DisablePrefetch))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_Unlock
</UL>

<P><STRONG><a name="[1bf]"></a>LL_FLASH_EnablePrefetch</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_cfg.o(.text.LL_FLASH_EnablePrefetch))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_Lock
</UL>

<P><STRONG><a name="[1f1]"></a>LL_RCC_GetAHBPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_ll_rcc.o(.text.LL_RCC_GetAHBPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>

<P><STRONG><a name="[1f2]"></a>LL_RCC_GetAPB1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_ll_rcc.o(.text.LL_RCC_GetAPB1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
</UL>

<P><STRONG><a name="[1f3]"></a>LL_RCC_GetAPB2Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_ll_rcc.o(.text.LL_RCC_GetAPB2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2ClockFreq
</UL>

<P><STRONG><a name="[1f4]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_ll_rcc.o(.text.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[1f6]"></a>LL_RCC_PLL_GetMainSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_ll_rcc.o(.text.LL_RCC_PLL_GetMainSource))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[1f8]"></a>LL_RCC_PLL_GetMultiplicator</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_ll_rcc.o(.text.LL_RCC_PLL_GetMultiplicator))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[1f7]"></a>LL_RCC_PLL_GetPrediv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_ll_rcc.o(.text.LL_RCC_PLL_GetPrediv))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[1dc]"></a>LL_APB1_GRP1_ForceReset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f1xx_ll_usart.o(.text.LL_APB1_GRP1_ForceReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_ForceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DeInit
</UL>

<P><STRONG><a name="[1dd]"></a>LL_APB1_GRP1_ReleaseReset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f1xx_ll_usart.o(.text.LL_APB1_GRP1_ReleaseReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_ReleaseReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DeInit
</UL>

<P><STRONG><a name="[1da]"></a>LL_APB2_GRP1_ForceReset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f1xx_ll_usart.o(.text.LL_APB2_GRP1_ForceReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_ForceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DeInit
</UL>

<P><STRONG><a name="[1db]"></a>LL_APB2_GRP1_ReleaseReset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f1xx_ll_usart.o(.text.LL_APB2_GRP1_ReleaseReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_ReleaseReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DeInit
</UL>

<P><STRONG><a name="[1df]"></a>LL_USART_IsEnabled</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_ll_usart.o(.text.LL_USART_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[1e2]"></a>LL_USART_SetBaudRate</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, stm32f1xx_ll_usart.o(.text.LL_USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_USART_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[1e1]"></a>LL_USART_SetHWFlowCtrl</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f1xx_ll_usart.o(.text.LL_USART_SetHWFlowCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_USART_SetHWFlowCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[1e0]"></a>LL_USART_SetStopBitsLength</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f1xx_ll_usart.o(.text.LL_USART_SetStopBitsLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_USART_SetStopBitsLength
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[1c4]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 102 bytes, Stack size 52 bytes, stm32f1xx_ll_gpio.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[1c7]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 102 bytes, Stack size 52 bytes, stm32f1xx_ll_gpio.o(.text.LL_GPIO_SetPinOutputType))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LL_GPIO_SetPinOutputType
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[1c5]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, stm32f1xx_ll_gpio.o(.text.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[1c6]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 102 bytes, Stack size 52 bytes, stm32f1xx_ll_gpio.o(.text.LL_GPIO_SetPinSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LL_GPIO_SetPinSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[1b3]"></a>LL_DMA_ClearFlag_GI1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f1xx_ll_dma.o(.text.LL_DMA_ClearFlag_GI1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_ClearFlag_GI1
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DeInit
</UL>

<P><STRONG><a name="[1b4]"></a>LL_DMA_ClearFlag_GI2</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f1xx_ll_dma.o(.text.LL_DMA_ClearFlag_GI2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_ClearFlag_GI2
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DeInit
</UL>

<P><STRONG><a name="[1b5]"></a>LL_DMA_ClearFlag_GI3</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_ll_dma.o(.text.LL_DMA_ClearFlag_GI3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_ClearFlag_GI3
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DeInit
</UL>

<P><STRONG><a name="[1b6]"></a>LL_DMA_ClearFlag_GI4</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_ll_dma.o(.text.LL_DMA_ClearFlag_GI4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_ClearFlag_GI4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DeInit
</UL>

<P><STRONG><a name="[1b7]"></a>LL_DMA_ClearFlag_GI5</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_ll_dma.o(.text.LL_DMA_ClearFlag_GI5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_ClearFlag_GI5
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DeInit
</UL>

<P><STRONG><a name="[1b8]"></a>LL_DMA_ClearFlag_GI6</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_ll_dma.o(.text.LL_DMA_ClearFlag_GI6))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_ClearFlag_GI6
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DeInit
</UL>

<P><STRONG><a name="[1b9]"></a>LL_DMA_ClearFlag_GI7</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_ll_dma.o(.text.LL_DMA_ClearFlag_GI7))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_ClearFlag_GI7
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DeInit
</UL>

<P><STRONG><a name="[1ba]"></a>LL_DMA_ConfigTransfer</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, stm32f1xx_ll_dma.o(.text.LL_DMA_ConfigTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_DMA_ConfigTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
</UL>

<P><STRONG><a name="[1bd]"></a>LL_DMA_SetDataLength</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, stm32f1xx_ll_dma.o(.text.LL_DMA_SetDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_DMA_SetDataLength
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
</UL>

<P><STRONG><a name="[1bb]"></a>LL_DMA_SetMemoryAddress</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, stm32f1xx_ll_dma.o(.text.LL_DMA_SetMemoryAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_DMA_SetMemoryAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
</UL>

<P><STRONG><a name="[1bc]"></a>LL_DMA_SetPeriphAddress</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, stm32f1xx_ll_dma.o(.text.LL_DMA_SetPeriphAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_DMA_SetPeriphAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
</UL>

<P><STRONG><a name="[1af]"></a>LL_ADC_Disable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f1xx_ll_adc.o(.text.LL_ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DeInit
</UL>

<P><STRONG><a name="[1ae]"></a>LL_ADC_INJ_SetTriggerSource</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f1xx_ll_adc.o(.text.LL_ADC_INJ_SetTriggerSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_INJ_SetTriggerSource
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DeInit
</UL>

<P><STRONG><a name="[1ac]"></a>LL_ADC_IsEnabled</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_ll_adc.o(.text.LL_ADC_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DeInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_CommonInit
</UL>

<P><STRONG><a name="[1b0]"></a>LL_ADC_REG_SetSequencerLength</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f1xx_ll_adc.o(.text.LL_ADC_REG_SetSequencerLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_REG_SetSequencerLength
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
</UL>

<P><STRONG><a name="[1ad]"></a>LL_ADC_REG_SetTriggerSource</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f1xx_ll_adc.o(.text.LL_ADC_REG_SetTriggerSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_REG_SetTriggerSource
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DeInit
</UL>

<P><STRONG><a name="[1b1]"></a>LL_CRC_ResetCRCCalculationUnit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f1xx_ll_crc.o(.text.LL_CRC_ResetCRCCalculationUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_CRC_ResetCRCCalculationUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CRC_DeInit
</UL>

<P><STRONG><a name="[1b2]"></a>LL_CRC_Write_IDR</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32f1xx_ll_crc.o(.text.LL_CRC_Write_IDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_CRC_Write_IDR
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CRC_DeInit
</UL>

<P><STRONG><a name="[1d1]"></a>IC1Config</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32f1xx_ll_tim.o(.text.IC1Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IC1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_Init
</UL>

<P><STRONG><a name="[1d2]"></a>IC2Config</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f1xx_ll_tim.o(.text.IC2Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IC2Config
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_Init
</UL>

<P><STRONG><a name="[1d3]"></a>IC3Config</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f1xx_ll_tim.o(.text.IC3Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IC3Config
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_Init
</UL>

<P><STRONG><a name="[1d4]"></a>IC4Config</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f1xx_ll_tim.o(.text.IC4Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IC4Config
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_Init
</UL>

<P><STRONG><a name="[1cd]"></a>LL_APB1_GRP1_ForceReset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f1xx_ll_tim.o(.text.LL_APB1_GRP1_ForceReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_ForceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DeInit
</UL>

<P><STRONG><a name="[1ce]"></a>LL_APB1_GRP1_ReleaseReset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f1xx_ll_tim.o(.text.LL_APB1_GRP1_ReleaseReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_ReleaseReset
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DeInit
</UL>

<P><STRONG><a name="[1cf]"></a>LL_APB2_GRP1_ForceReset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f1xx_ll_tim.o(.text.LL_APB2_GRP1_ForceReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_ForceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DeInit
</UL>

<P><STRONG><a name="[1d0]"></a>LL_APB2_GRP1_ReleaseReset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f1xx_ll_tim.o(.text.LL_APB2_GRP1_ReleaseReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_ReleaseReset
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DeInit
</UL>

<P><STRONG><a name="[1d8]"></a>LL_TIM_GenerateEvent_UPDATE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_GenerateEvent_UPDATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_GenerateEvent_UPDATE
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[1d5]"></a>LL_TIM_SetAutoReload</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_SetAutoReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_SetAutoReload
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[1d6]"></a>LL_TIM_SetPrescaler</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_SetPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[1d7]"></a>LL_TIM_SetRepetitionCounter</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_SetRepetitionCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_SetRepetitionCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[8d]"></a>LL_ADC_Disable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc_cfg.o(.text.LL_ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Stop
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Stop
</UL>

<P><STRONG><a name="[85]"></a>LL_ADC_Enable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc_cfg.o(.text.LL_ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Restart
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Restart
</UL>

<P><STRONG><a name="[a8]"></a>LL_ADC_IsCalibrationOnGoing</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, adc_cfg.o(.text.LL_ADC_IsCalibrationOnGoing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_IsCalibrationOnGoing
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
</UL>

<P><STRONG><a name="[94]"></a>LL_ADC_REG_SetSequencerRanks</STRONG> (Thumb, 98 bytes, Stack size 44 bytes, adc_cfg.o(.text.LL_ADC_REG_SetSequencerRanks))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_Init
</UL>

<P><STRONG><a name="[a6]"></a>LL_ADC_REG_StartConversionSWStart</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc_cfg.o(.text.LL_ADC_REG_StartConversionSWStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_REG_StartConversionSWStart
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftStart
</UL>

<P><STRONG><a name="[95]"></a>LL_ADC_SetChannelSamplingTime</STRONG> (Thumb, 144 bytes, Stack size 60 bytes, adc_cfg.o(.text.LL_ADC_SetChannelSamplingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_Init
</UL>

<P><STRONG><a name="[a7]"></a>LL_ADC_StartCalibration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc_cfg.o(.text.LL_ADC_StartCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_StartCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
</UL>

<P><STRONG><a name="[7a]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, adc_cfg.o(.text.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Init
</UL>

<P><STRONG><a name="[a1]"></a>LL_APB2_GRP1_DisableClock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, adc_cfg.o(.text.LL_APB2_GRP1_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Clock
</UL>

<P><STRONG><a name="[a0]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, adc_cfg.o(.text.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Clock
</UL>

<P><STRONG><a name="[8a]"></a>LL_DMA_ClearFlag_GI1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adc_cfg.o(.text.LL_DMA_ClearFlag_GI1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_ClearFlag_GI1
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Stop
</UL>

<P><STRONG><a name="[9b]"></a>LL_DMA_ClearFlag_GI5</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, adc_cfg.o(.text.LL_DMA_ClearFlag_GI5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_ClearFlag_GI5
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Stop
</UL>

<P><STRONG><a name="[8b]"></a>LL_DMA_ClearFlag_HT1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adc_cfg.o(.text.LL_DMA_ClearFlag_HT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_ClearFlag_HT1
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Stop
</UL>

<P><STRONG><a name="[9c]"></a>LL_DMA_ClearFlag_HT5</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, adc_cfg.o(.text.LL_DMA_ClearFlag_HT5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_ClearFlag_HT5
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Stop
</UL>

<P><STRONG><a name="[8c]"></a>LL_DMA_ClearFlag_TC1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adc_cfg.o(.text.LL_DMA_ClearFlag_TC1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_ClearFlag_TC1
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Stop
</UL>

<P><STRONG><a name="[9d]"></a>LL_DMA_ClearFlag_TC5</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, adc_cfg.o(.text.LL_DMA_ClearFlag_TC5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_ClearFlag_TC5
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Stop
</UL>

<P><STRONG><a name="[89]"></a>LL_DMA_DisableChannel</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, adc_cfg.o(.text.LL_DMA_DisableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Stop
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Stop
</UL>

<P><STRONG><a name="[7d]"></a>LL_DMA_EnableChannel</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, adc_cfg.o(.text.LL_DMA_EnableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Restart
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Restart
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Init
</UL>

<P><STRONG><a name="[82]"></a>LL_DMA_EnableIT_TC</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, adc_cfg.o(.text.LL_DMA_EnableIT_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_DMA_EnableIT_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Init
</UL>

<P><STRONG><a name="[84]"></a>LL_DMA_SetDataLength</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, adc_cfg.o(.text.LL_DMA_SetDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_DMA_SetDataLength
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Restart
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Restart
</UL>

<P><STRONG><a name="[92]"></a>LL_RCC_SetADCClockSource</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, adc_cfg.o(.text.LL_RCC_SetADCClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_SetADCClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_Init
</UL>

<P><STRONG><a name="[81]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, adc_cfg.o(.text.NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Init
</UL>

<P><STRONG><a name="[7f]"></a>NVIC_EncodePriority</STRONG> (Thumb, 128 bytes, Stack size 52 bytes, adc_cfg.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Init
</UL>

<P><STRONG><a name="[7e]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc_cfg.o(.text.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Init
</UL>

<P><STRONG><a name="[80]"></a>NVIC_SetPriority</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, adc_cfg.o(.text.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC3_DMA_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ADC1_DMA_Init
</UL>

<P><STRONG><a name="[265]"></a>LL_FLASH_EnablePrefetch</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_FLASH_EnablePrefetch))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[255]"></a>LL_FLASH_GetLatency</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_FLASH_GetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[254]"></a>LL_FLASH_SetLatency</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text.LL_FLASH_SetLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_FLASH_SetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[262]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[257]"></a>LL_RCC_HSE_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_HSE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[258]"></a>LL_RCC_HSE_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_HSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[259]"></a>LL_RCC_LSI_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_LSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[25a]"></a>LL_RCC_LSI_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_LSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[25b]"></a>LL_RCC_PLL_ConfigDomain_SYS</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, main.o(.text.LL_RCC_PLL_ConfigDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_RCC_PLL_ConfigDomain_SYS
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[25c]"></a>LL_RCC_PLL_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_PLL_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[25d]"></a>LL_RCC_PLL_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_PLL_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[25e]"></a>LL_RCC_SetAHBPrescaler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text.LL_RCC_SetAHBPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_SetAHBPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[25f]"></a>LL_RCC_SetAPB1Prescaler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text.LL_RCC_SetAPB1Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_SetAPB1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[260]"></a>LL_RCC_SetAPB2Prescaler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text.LL_RCC_SetAPB2Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_SetAPB2Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[261]"></a>LL_RCC_SetSysClkSource</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text.LL_RCC_SetSysClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_SetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[263]"></a>LL_SYSTICK_SetClkSource</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(.text.LL_SYSTICK_SetClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SYSTICK_SetClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1e6]"></a>NVIC_EncodePriority</STRONG> (Thumb, 128 bytes, Stack size 52 bytes, main.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[1e5]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[1e7]"></a>NVIC_SetPriority</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, main.o(.text.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[1e4]"></a>NVIC_SetPriorityGrouping</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, main.o(.text.NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[c2]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, at24cxx_cfg.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_SWI2C_WritePageByte
</UL>

<P><STRONG><a name="[b3]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, at24cxx_cfg.o(.text.LL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_SWI2C_WritePageByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_I2C_Device0_Init
</UL>

<P><STRONG><a name="[dc]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, crc_cfg.o(.text.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Init
</UL>

<P><STRONG><a name="[d7]"></a>LL_CRC_FeedData32</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, crc_cfg.o(.text.LL_CRC_FeedData32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_CRC_FeedData32
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CRC32_HWCRC
</UL>

<P><STRONG><a name="[d8]"></a>LL_CRC_ReadData32</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, crc_cfg.o(.text.LL_CRC_ReadData32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_CRC_ReadData32
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CRC32_HWCRC
</UL>

<P><STRONG><a name="[d9]"></a>LL_CRC_ResetCRCCalculationUnit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, crc_cfg.o(.text.LL_CRC_ResetCRCCalculationUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_CRC_ResetCRCCalculationUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CRC32_HWReSet
</UL>

<P><STRONG><a name="[e6]"></a>LL_RCC_ClearFlag_HSECSS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, css_cfg.o(.text.LL_RCC_ClearFlag_HSECSS))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSS_NMI_IRQ
</UL>

<P><STRONG><a name="[e9]"></a>LL_RCC_ClearFlag_HSERDY</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, css_cfg.o(.text.LL_RCC_ClearFlag_HSERDY))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSS_RCC_IRQ
</UL>

<P><STRONG><a name="[e8]"></a>LL_RCC_DisableIT_HSERDY</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, css_cfg.o(.text.LL_RCC_DisableIT_HSERDY))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSS_RCC_IRQ
</UL>

<P><STRONG><a name="[e5]"></a>LL_RCC_EnableIT_HSERDY</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, css_cfg.o(.text.LL_RCC_EnableIT_HSERDY))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSS_NMI_IRQ
</UL>

<P><STRONG><a name="[e4]"></a>LL_RCC_HSE_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, css_cfg.o(.text.LL_RCC_HSE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSS_NMI_IRQ
</UL>

<P><STRONG><a name="[e3]"></a>LL_RCC_IsActiveFlag_HSECSS</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, css_cfg.o(.text.LL_RCC_IsActiveFlag_HSECSS))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSS_NMI_IRQ
</UL>

<P><STRONG><a name="[e7]"></a>LL_RCC_IsActiveFlag_HSERDY</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, css_cfg.o(.text.LL_RCC_IsActiveFlag_HSERDY))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSS_RCC_IRQ
</UL>

<P><STRONG><a name="[eb]"></a>NVIC_SystemReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, css_cfg.o(.text.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSS_RCC_IRQ
</UL>

<P><STRONG><a name="[128]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, decode_cfg.o(.text.LL_GPIO_IsInputPinSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_GetRST
</UL>

<P><STRONG><a name="[10c]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, decode_cfg.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_STOP
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_START
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodePass
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeLEDInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeLED
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeCHInit
</UL>

<P><STRONG><a name="[10e]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, decode_cfg.o(.text.LL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_START
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeRSTInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodePassInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodePass
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeLED
</UL>

<P><STRONG><a name="[12d]"></a>LL_TIM_ClearFlag_CC1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_ClearFlag_CC1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_ClearFlag_CC1
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_START
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_IRQTask
</UL>

<P><STRONG><a name="[130]"></a>LL_TIM_ClearFlag_CC2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_ClearFlag_CC2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_ClearFlag_CC2
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_START
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_IRQTask
</UL>

<P><STRONG><a name="[133]"></a>LL_TIM_ClearFlag_CC3</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_ClearFlag_CC3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_ClearFlag_CC3
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_START
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_IRQTask
</UL>

<P><STRONG><a name="[136]"></a>LL_TIM_ClearFlag_CC4</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_ClearFlag_CC4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_ClearFlag_CC4
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_START
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_IRQTask
</UL>

<P><STRONG><a name="[12a]"></a>LL_TIM_ClearFlag_UPDATE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_ClearFlag_UPDATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_ClearFlag_UPDATE
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_START
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_IRQTask
</UL>

<P><STRONG><a name="[117]"></a>LL_TIM_DisableARRPreload</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_DisableARRPreload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_DisableARRPreload
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
</UL>

<P><STRONG><a name="[13c]"></a>LL_TIM_DisableCounter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_DisableCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_DisableCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_STOP
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_START
</UL>

<P><STRONG><a name="[11a]"></a>LL_TIM_DisableMasterSlaveMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_DisableMasterSlaveMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_DisableMasterSlaveMode
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
</UL>

<P><STRONG><a name="[126]"></a>LL_TIM_EnableCounter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_EnableCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_EnableCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_START
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
</UL>

<P><STRONG><a name="[121]"></a>LL_TIM_EnableIT_CC1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_EnableIT_CC1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_EnableIT_CC1
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
</UL>

<P><STRONG><a name="[122]"></a>LL_TIM_EnableIT_CC2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_EnableIT_CC2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_EnableIT_CC2
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
</UL>

<P><STRONG><a name="[123]"></a>LL_TIM_EnableIT_CC3</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_EnableIT_CC3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_EnableIT_CC3
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
</UL>

<P><STRONG><a name="[124]"></a>LL_TIM_EnableIT_CC4</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_EnableIT_CC4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_EnableIT_CC4
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
</UL>

<P><STRONG><a name="[125]"></a>LL_TIM_EnableIT_UPDATE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_EnableIT_UPDATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_EnableIT_UPDATE
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
</UL>

<P><STRONG><a name="[137]"></a>LL_TIM_GetCounter</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_GetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Query
</UL>

<P><STRONG><a name="[12c]"></a>LL_TIM_IC_GetCaptureCH1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_IC_GetCaptureCH1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_IC_GetCaptureCH1
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_IRQTask
</UL>

<P><STRONG><a name="[12f]"></a>LL_TIM_IC_GetCaptureCH2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_IC_GetCaptureCH2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_IC_GetCaptureCH2
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_IRQTask
</UL>

<P><STRONG><a name="[132]"></a>LL_TIM_IC_GetCaptureCH3</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_IC_GetCaptureCH3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_IC_GetCaptureCH3
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_IRQTask
</UL>

<P><STRONG><a name="[135]"></a>LL_TIM_IC_GetCaptureCH4</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_IC_GetCaptureCH4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_IC_GetCaptureCH4
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_IRQTask
</UL>

<P><STRONG><a name="[109]"></a>LL_TIM_IC_GetPolarity</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, decode_cfg.o(.text.LL_TIM_IC_GetPolarity))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_TIM_IC_GetPolarity
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_CaptureHandler
</UL>

<P><STRONG><a name="[10a]"></a>LL_TIM_IC_SetPolarity</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, decode_cfg.o(.text.LL_TIM_IC_SetPolarity))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LL_TIM_IC_SetPolarity
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_SetPolarityRising
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_CaptureHandler
</UL>

<P><STRONG><a name="[12b]"></a>LL_TIM_IsActiveFlag_CC1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_IsActiveFlag_CC1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_IsActiveFlag_CC1
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_IRQTask
</UL>

<P><STRONG><a name="[12e]"></a>LL_TIM_IsActiveFlag_CC2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_IsActiveFlag_CC2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_IsActiveFlag_CC2
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_IRQTask
</UL>

<P><STRONG><a name="[131]"></a>LL_TIM_IsActiveFlag_CC3</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_IsActiveFlag_CC3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_IsActiveFlag_CC3
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_IRQTask
</UL>

<P><STRONG><a name="[134]"></a>LL_TIM_IsActiveFlag_CC4</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_IsActiveFlag_CC4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_IsActiveFlag_CC4
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_IRQTask
</UL>

<P><STRONG><a name="[129]"></a>LL_TIM_IsActiveFlag_UPDATE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, decode_cfg.o(.text.LL_TIM_IsActiveFlag_UPDATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_IsActiveFlag_UPDATE
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_IRQTask
</UL>

<P><STRONG><a name="[118]"></a>LL_TIM_SetClockSource</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, decode_cfg.o(.text.LL_TIM_SetClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_SetClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
</UL>

<P><STRONG><a name="[13d]"></a>LL_TIM_SetCounter</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, decode_cfg.o(.text.LL_TIM_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_START
</UL>

<P><STRONG><a name="[119]"></a>LL_TIM_SetTriggerOutput</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, decode_cfg.o(.text.LL_TIM_SetTriggerOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_SetTriggerOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
</UL>

<P><STRONG><a name="[11f]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, decode_cfg.o(.text.NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
</UL>

<P><STRONG><a name="[11d]"></a>NVIC_EncodePriority</STRONG> (Thumb, 128 bytes, Stack size 52 bytes, decode_cfg.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
</UL>

<P><STRONG><a name="[11c]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, decode_cfg.o(.text.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
</UL>

<P><STRONG><a name="[11e]"></a>NVIC_SetPriority</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, decode_cfg.o(.text.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_DecodeTimerInit
</UL>

<P><STRONG><a name="[152]"></a>LL_FLASH_DisablePrefetch</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, flash_cfg.o(.text.LL_FLASH_DisablePrefetch))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockRead
</UL>

<P><STRONG><a name="[161]"></a>LL_APB2_GRP1_DisableClock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gpio_cfg.o(.text.LL_APB2_GRP1_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Clock
</UL>

<P><STRONG><a name="[160]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gpio_cfg.o(.text.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Clock
</UL>

<P><STRONG><a name="[162]"></a>LL_GPIO_AF_Remap_SWJ_NOJTAG</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio_cfg.o(.text.LL_GPIO_AF_Remap_SWJ_NOJTAG))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[163]"></a>LL_GPIO_AF_Remap_SWJ_NONJTRST</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio_cfg.o(.text.LL_GPIO_AF_Remap_SWJ_NONJTRST))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[176]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, i2c_cfg.o(.text.LL_GPIO_IsInputPinSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_STOP
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_START
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_ReadBit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_ReadACK
</UL>

<P><STRONG><a name="[173]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2c_cfg.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_SendByte
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_SendBit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_STOP
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_START
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_ReadByte
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_ReadBit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_ReadACK
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_NACK
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_ACK
</UL>

<P><STRONG><a name="[174]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2c_cfg.o(.text.LL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_SendBit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_STOP
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_START
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_ReadByte
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_ReadBit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_ReadACK
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_NACK
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MSW_ACK
</UL>

<P><STRONG><a name="[17e]"></a>LL_IWDG_Enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, iwdg_cfg.o(.text.LL_IWDG_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[17f]"></a>LL_IWDG_EnableWriteAccess</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, iwdg_cfg.o(.text.LL_IWDG_EnableWriteAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IWDG_EnableWriteAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[182]"></a>LL_IWDG_IsReady</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, iwdg_cfg.o(.text.LL_IWDG_IsReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IWDG_IsReady
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[183]"></a>LL_IWDG_ReloadCounter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, iwdg_cfg.o(.text.LL_IWDG_ReloadCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Reset
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[180]"></a>LL_IWDG_SetPrescaler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, iwdg_cfg.o(.text.LL_IWDG_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_IWDG_SetPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[181]"></a>LL_IWDG_SetReloadCounter</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, iwdg_cfg.o(.text.LL_IWDG_SetReloadCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_IWDG_SetReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[1a2]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, key_cfg.o(.text.LL_GPIO_IsInputPinSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetSOT
</UL>

<P><STRONG><a name="[19d]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, key_cfg.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_EOTSTOP
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BINDPass
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BINCPass
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BINBPass
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BINAPass
</UL>

<P><STRONG><a name="[19e]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, key_cfg.o(.text.LL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SOTInit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_EOTSTART
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_EOTInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BINInit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BINDPass
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BINCPass
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BINBPass
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BINAPass
</UL>

<P><STRONG><a name="[1a5]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, led_cfg.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDWork_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDDebug_Init
</UL>

<P><STRONG><a name="[1ab]"></a>LL_GPIO_TogglePin</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, led_cfg.o(.text.LL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDWork_Task
</UL>

<P><STRONG><a name="[1f0]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, power_cfg.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Init
</UL>

<P><STRONG><a name="[227]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rfask_cfg.o(.text.LL_GPIO_IsInputPinSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_GetYSELD
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_GetYSELC
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_GetYSELB
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_GetYSELA
</UL>

<P><STRONG><a name="[225]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rfask_cfg.o(.text.LL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_YSELInit
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASK_ClkInit
</UL>

<P><STRONG><a name="[20e]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rfask_task.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_KeyTask
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_WM8510Task
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentScan
</UL>

<P><STRONG><a name="[20f]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rfask_task.o(.text.LL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_KeyTask
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_WM8510Task
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFASKTask_FreqCurrentScan
</UL>

<P><STRONG><a name="[249]"></a>LL_InitTick</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, systick_cfg.o(.text.LL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[24c]"></a>NVIC_EncodePriority</STRONG> (Thumb, 128 bytes, Stack size 52 bytes, systick_cfg.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[24b]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, systick_cfg.o(.text.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[24d]"></a>NVIC_SetPriority</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, systick_cfg.o(.text.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[24a]"></a>NVIC_SetPriorityGrouping</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, systick_cfg.o(.text.NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[281]"></a>LL_APB1_GRP1_DisableClock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer_cfg.o(.text.LL_APB1_GRP1_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Clock
</UL>

<P><STRONG><a name="[280]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer_cfg.o(.text.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Clock
</UL>

<P><STRONG><a name="[283]"></a>LL_APB2_GRP1_DisableClock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer_cfg.o(.text.LL_APB2_GRP1_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Clock
</UL>

<P><STRONG><a name="[282]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer_cfg.o(.text.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Clock
</UL>

<P><STRONG><a name="[270]"></a>LL_GPIO_AF_RemapPartial_TIM3</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer_cfg.o(.text.LL_GPIO_AF_RemapPartial_TIM3))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreqMode_Init
</UL>

<P><STRONG><a name="[275]"></a>LL_TIM_CC_DisableChannel</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timer_cfg.o(.text.LL_TIM_CC_DisableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_CC_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreqMode_Init
</UL>

<P><STRONG><a name="[27e]"></a>LL_TIM_DisableCounter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer_cfg.o(.text.LL_TIM_DisableCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_DisableCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreq_Init
</UL>

<P><STRONG><a name="[279]"></a>LL_TIM_DisableDMAReq_TRIG</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer_cfg.o(.text.LL_TIM_DisableDMAReq_TRIG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_DisableDMAReq_TRIG
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreqMode_Init
</UL>

<P><STRONG><a name="[278]"></a>LL_TIM_DisableIT_TRIG</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer_cfg.o(.text.LL_TIM_DisableIT_TRIG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_DisableIT_TRIG
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreqMode_Init
</UL>

<P><STRONG><a name="[27b]"></a>LL_TIM_DisableMasterSlaveMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer_cfg.o(.text.LL_TIM_DisableMasterSlaveMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_DisableMasterSlaveMode
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreqMode_Init
</UL>

<P><STRONG><a name="[271]"></a>LL_TIM_EnableARRPreload</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer_cfg.o(.text.LL_TIM_EnableARRPreload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_EnableARRPreload
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreqMode_Init
</UL>

<P><STRONG><a name="[27c]"></a>LL_TIM_EnableCounter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer_cfg.o(.text.LL_TIM_EnableCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_EnableCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreq_Init
</UL>

<P><STRONG><a name="[27f]"></a>LL_TIM_GetCounter</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer_cfg.o(.text.LL_TIM_GetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreq_Init
</UL>

<P><STRONG><a name="[273]"></a>LL_TIM_IC_SetActiveInput</STRONG> (Thumb, 206 bytes, Stack size 60 bytes, timer_cfg.o(.text.LL_TIM_IC_SetActiveInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LL_TIM_IC_SetActiveInput
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreqMode_Init
</UL>

<P><STRONG><a name="[276]"></a>LL_TIM_IC_SetFilter</STRONG> (Thumb, 206 bytes, Stack size 60 bytes, timer_cfg.o(.text.LL_TIM_IC_SetFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LL_TIM_IC_SetFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreqMode_Init
</UL>

<P><STRONG><a name="[277]"></a>LL_TIM_IC_SetPolarity</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, timer_cfg.o(.text.LL_TIM_IC_SetPolarity))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LL_TIM_IC_SetPolarity
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreqMode_Init
</UL>

<P><STRONG><a name="[274]"></a>LL_TIM_SetClockSource</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timer_cfg.o(.text.LL_TIM_SetClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_SetClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreqMode_Init
</UL>

<P><STRONG><a name="[27d]"></a>LL_TIM_SetCounter</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, timer_cfg.o(.text.LL_TIM_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreq_Init
</UL>

<P><STRONG><a name="[272]"></a>LL_TIM_SetTriggerInput</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer_cfg.o(.text.LL_TIM_SetTriggerInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_SetTriggerInput
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreqMode_Init
</UL>

<P><STRONG><a name="[27a]"></a>LL_TIM_SetTriggerOutput</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer_cfg.o(.text.LL_TIM_SetTriggerOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_SetTriggerOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_CalcFreqMode_Init
</UL>

<P><STRONG><a name="[2ba]"></a>LL_APB1_GRP1_DisableClock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usart_cfg.o(.text.LL_APB1_GRP1_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Clock
</UL>

<P><STRONG><a name="[2b9]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usart_cfg.o(.text.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Clock
</UL>

<P><STRONG><a name="[2b8]"></a>LL_APB2_GRP1_DisableClock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usart_cfg.o(.text.LL_APB2_GRP1_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Clock
</UL>

<P><STRONG><a name="[2b7]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usart_cfg.o(.text.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Clock
</UL>

<P><STRONG><a name="[2b5]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usart_cfg.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_485GPIOInit
</UL>

<P><STRONG><a name="[2b6]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usart_cfg.o(.text.LL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_485GPIOInit
</UL>

<P><STRONG><a name="[2bb]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 102 bytes, Stack size 52 bytes, usart_cfg.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIOInit
</UL>

<P><STRONG><a name="[2ca]"></a>LL_USART_ClearFlag_TC</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart_cfg.o(.text.LL_USART_ClearFlag_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_ClearFlag_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Printf
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PollMode_WriteByte
</UL>

<P><STRONG><a name="[292]"></a>LL_USART_ConfigAsyncMode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart_cfg.o(.text.LL_USART_ConfigAsyncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_ConfigAsyncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[2c1]"></a>LL_USART_DisableIT_TC</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart_cfg.o(.text.LL_USART_DisableIT_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_DisableIT_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITWrite_TCTask
</UL>

<P><STRONG><a name="[2c3]"></a>LL_USART_DisableIT_TXE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart_cfg.o(.text.LL_USART_DisableIT_TXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_DisableIT_TXE
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITWrite_TXETask
</UL>

<P><STRONG><a name="[298]"></a>LL_USART_Enable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart_cfg.o(.text.LL_USART_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[297]"></a>LL_USART_EnableIT_RXNE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart_cfg.o(.text.LL_USART_EnableIT_RXNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_EnableIT_RXNE
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[2c4]"></a>LL_USART_EnableIT_TC</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart_cfg.o(.text.LL_USART_EnableIT_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_EnableIT_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITWrite_TXETask
</UL>

<P><STRONG><a name="[2cf]"></a>LL_USART_EnableIT_TXE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart_cfg.o(.text.LL_USART_EnableIT_TXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_EnableIT_TXE
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RealTime_AddByte
</UL>

<P><STRONG><a name="[2c9]"></a>LL_USART_IsActiveFlag_TC</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart_cfg.o(.text.LL_USART_IsActiveFlag_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_IsActiveFlag_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Printf
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PollMode_WriteByte
</UL>

<P><STRONG><a name="[2cc]"></a>LL_USART_IsActiveFlag_TXE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart_cfg.o(.text.LL_USART_IsActiveFlag_TXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_IsActiveFlag_TXE
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Printf
</UL>

<P><STRONG><a name="[2cd]"></a>LL_USART_IsEnabledIT_TC</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart_cfg.o(.text.LL_USART_IsEnabledIT_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_IsEnabledIT_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Printf
</UL>

<P><STRONG><a name="[2cb]"></a>LL_USART_IsEnabledIT_TXE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart_cfg.o(.text.LL_USART_IsEnabledIT_TXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_IsEnabledIT_TXE
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Printf
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RealTime_AddByte
</UL>

<P><STRONG><a name="[2c0]"></a>LL_USART_TransmitData8</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart_cfg.o(.text.LL_USART_TransmitData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_USART_TransmitData8
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PollMode_WriteByte
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITWrite_TXETask
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITWrite_TCTask
</UL>

<P><STRONG><a name="[296]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usart_cfg.o(.text.NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[294]"></a>NVIC_EncodePriority</STRONG> (Thumb, 128 bytes, Stack size 52 bytes, usart_cfg.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[293]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart_cfg.o(.text.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[295]"></a>NVIC_SetPriority</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usart_cfg.o(.text.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[2e6]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e5]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[2e9]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e8]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4e]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
